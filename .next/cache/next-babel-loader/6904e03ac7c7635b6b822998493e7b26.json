{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useState, createContext, useContext, useEffect } from 'react';\nimport { initiateCheckout } from '../lib/payments.js';\nimport { getStorageItem, setStorageItem } from '../lib/storage.js';\nimport products from '../products/products.json';\nvar CART_STATE_KEY = 'cart';\nvar defaultCart = {\n  products: {}\n};\nexport var CartContext = /*#__PURE__*/createContext();\nexport function useCartState() {\n  _s();\n\n  var _useState = useState(defaultCart),\n      cart = _useState[0],\n      updateCart = _useState[1];\n\n  useEffect(function () {\n    var data = getStorageItem(CART_STATE_KEY);\n\n    if (data) {\n      updateCart(data);\n    }\n  }, []);\n  useEffect(function () {\n    setStorageItem(CART_STATE_KEY, cart);\n  }, [cart]);\n  var cartItems = Object.keys(cart.products).map(function (key) {\n    var product = products.find(function (_ref) {\n      var id = _ref.id;\n      return \"\".concat(id) === \"\".concat(key);\n    });\n    return _objectSpread(_objectSpread({}, cart.products[key]), {}, {\n      pricePerUnit: product.price\n    });\n  });\n  var subtotal = cartItems.reduce(function (accumulator, _ref2) {\n    var pricePerUnit = _ref2.pricePerUnit,\n        quantity = _ref2.quantity;\n    return accumulator + pricePerUnit * quantity;\n  }, 0);\n  var quantity = cartItems.reduce(function (accumulator, _ref3) {\n    var quantity = _ref3.quantity;\n    return accumulator + quantity;\n  }, 0);\n\n  function addToCart(_ref4) {\n    var id = _ref4.id;\n    updateCart(function (prev) {\n      var cart = _objectSpread({}, prev);\n\n      if (cart.products[id]) {\n        cart.products[id].quantity = cart.products[id].quantity + 1;\n      } else {\n        cart.products[id] = {\n          id: id,\n          quantity: 1\n        };\n      }\n\n      return cart;\n    });\n  }\n\n  function checkout() {\n    initiateCheckout({\n      lineItems: cartItems.map(function (_ref5) {\n        var id = _ref5.id,\n            quantity = _ref5.quantity;\n        return {\n          price: id,\n          quantity: quantity\n        };\n      })\n    });\n  }\n  /**\n   * @lesson-15-todo Exercise 3\n   * We have an addToCart function that adds 1 item to\n   * a product by its ID, but we dont have a way to\n   * update that value manually. What kind of function\n   * can we add that allows us to externally update\n   * a quantity by product ID and make that available\n   * globally?\n   */\n\n\n  return {\n    cart: cart,\n    cartItems: cartItems,\n    subtotal: subtotal,\n    quantity: quantity,\n    addToCart: addToCart,\n    checkout: checkout\n  };\n}\n\n_s(useCartState, \"x+QvYJ952F60vNclMWRVBmNS9jg=\");\n\nexport function useCart() {\n  _s2();\n\n  var cart = useContext(CartContext);\n  return cart;\n}\n\n_s2(useCart, \"QchebOVKze+CH1FRHiU38Fd0/kM=\");","map":{"version":3,"sources":["/Users/benhowarth/Desktop/iPatchNext copy/hooks/use-cart.js"],"names":["useState","createContext","useContext","useEffect","initiateCheckout","getStorageItem","setStorageItem","products","CART_STATE_KEY","defaultCart","CartContext","useCartState","cart","updateCart","data","cartItems","Object","keys","map","key","product","find","id","pricePerUnit","price","subtotal","reduce","accumulator","quantity","addToCart","prev","checkout","lineItems","useCart"],"mappings":"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","sourcesContent":["import { useState, createContext, useContext, useEffect } from 'react';\n\nimport { initiateCheckout } from '../lib/payments.js'\nimport { getStorageItem, setStorageItem } from '../lib/storage.js'\n\nimport products from '../products/products.json';\n\nconst CART_STATE_KEY = 'cart';\n\nconst defaultCart = {\n  products: {}\n}\n\nexport const CartContext = createContext();\n\nexport function useCartState() {\n  const [cart, updateCart] = useState(defaultCart);\n\n  useEffect(() => {\n    const data = getStorageItem(CART_STATE_KEY);\n    if ( data ) {\n      updateCart(data);\n    }\n  }, []);\n\n  useEffect(() => {\n    setStorageItem(CART_STATE_KEY, cart);\n  }, [cart]);\n\n  const cartItems = Object.keys(cart.products).map(key => {\n    const product = products.find(({ id }) => `${id}` === `${key}`);\n    return {\n      ...cart.products[key],\n      pricePerUnit: product.price\n    }\n  });\n\n  const subtotal = cartItems.reduce((accumulator, { pricePerUnit, quantity }) => {\n    return accumulator + ( pricePerUnit * quantity );\n  }, 0);\n\n  const quantity = cartItems.reduce((accumulator, { quantity }) => {\n    return accumulator + quantity;\n  }, 0);\n\n  function addToCart({ id }) {\n    updateCart((prev) => {\n      let cart = {...prev};\n\n      if ( cart.products[id] ) {\n        cart.products[id].quantity = cart.products[id].quantity + 1;\n      } else {\n        cart.products[id] = {\n          id,\n          quantity: 1\n        }\n      }\n\n      return cart;\n    })\n  }\n\n  function checkout() {\n    initiateCheckout({\n      lineItems: cartItems.map(({ id, quantity }) => {\n        return {\n          price: id,\n          quantity\n        }\n      })\n    })\n  }\n\n  /**\n   * @lesson-15-todo Exercise 3\n   * We have an addToCart function that adds 1 item to\n   * a product by its ID, but we dont have a way to\n   * update that value manually. What kind of function\n   * can we add that allows us to externally update\n   * a quantity by product ID and make that available\n   * globally?\n   */\n\n  return {\n    cart,\n    cartItems,\n    subtotal,\n    quantity,\n    addToCart,\n    checkout\n  }\n\n}\n\nexport function useCart() {\n  const cart = useContext(CartContext);\n  return cart;\n}"]},"metadata":{},"sourceType":"module"}