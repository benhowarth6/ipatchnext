{"version":3,"file":"formium.esm.js","sources":["../src/errors.ts","../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) Formium, Inc. and its affiliates.\n *\n * This source code is licensed under the Business Source License license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n/**\n * This error is thrown when there is an API error with a payload. The error\n * body includes the data that came in the payload plus status and a server\n * message. When it's a rate limit error in includes `retryAfter`\n */\nexport class APIError extends Error {\n  status: number;\n  serverMessage: string;\n  link?: string;\n  action?: string;\n  retryAfter: number | null | 'never';\n  [key: string]: any;\n\n  constructor(message: string, response: Response, body?: object) {\n    super();\n    this.message = `${message} (${response.status})`;\n    this.status = response.status;\n    this.serverMessage = message;\n    this.retryAfter = null;\n\n    if (body) {\n      for (const field of Object.keys(body)) {\n        if (field !== 'message') {\n          // @ts-ignore\n          this[field] = body[field];\n        }\n      }\n    }\n\n    if (response.status === 429) {\n      const retryAfter = response.headers.get('Retry-After');\n      if (retryAfter) {\n        this.retryAfter = parseInt(retryAfter, 10);\n      }\n    }\n  }\n}\n","/**\n * Copyright (c) Formium, Inc. and its affiliates.\n *\n * This source code is licensed under the Business Source License license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport 'cross-fetch/polyfill';\nimport qs from 'query-string';\nimport { APIError } from './errors';\nimport { Submit, User, Form, Project } from '@formium/types';\n\n/**\n * Create a wrapper around fetch() with API base URL and default headers.\n *\n * @param fetchImplementation - Fetch implmementation (useful of debugging/testing)\n * @param baseUrl - Base API URL\n *\n * @public\n */\nexport function _createFetcher(\n  baseUrl: string,\n  fetchImplementation: typeof fetch,\n  apiToken?: string\n) {\n  return function fetcher(endpoint: string, options: RequestInit = {}) {\n    let opts = options;\n    opts.headers = options.headers || {};\n    (opts.headers as any)['X-Formik-Client'] = '@formium/client';\n    (opts.headers as any)['X-Formik-Client-Version'] = __VERSION__;\n    if (apiToken) {\n      (opts.headers as any).Authorization = `Bearer ${apiToken}`;\n    }\n\n    return fetchImplementation(baseUrl + endpoint, opts).then(async res => {\n      if (res.ok) {\n        if (!res.headers.get('content-type')) {\n          return;\n        }\n        return res.headers.get('content-type')!.includes('application/json')\n          ? await res.json()\n          : res;\n      }\n\n      let bodyError;\n      let body = await res.json();\n\n      // Some APIs wrongly return `err` instead of `error`\n      bodyError = body.error || body.err || body;\n\n      const msg = bodyError?.message || 'Response Error';\n\n      return Promise.reject(new APIError(msg, res, bodyError));\n    });\n  };\n}\n\n/**\n * Formium Client options\n *\n * @public\n */\nexport interface Options {\n  /** Base URL */\n  baseUrl?: string;\n  /** Custom fetch implementation (useful for mocking) */\n  fetchImplementation?: any;\n  /** API token */\n  apiToken?: string;\n}\n\n/**\n * Submission data.\n *\n * @remarks\n * This can either be a plain JavaScript object or `FormData`. If `FormData` contains files,\n * the submission will be rejected. If your form contains file uploads, please upload them using `formium.uploadFile(formSlug, file)` first, and store the returned URL. For more information about uploads, please refer to `formium.uploadFile`.\n *\n * For security, Formium upholds the following limits on data that you should be aware of:\n *   - The following keys are banned: `pass`, `password`, `pw`, `ssn`, `cc`, `creditCard`, `credit_card`, `creditcard`, `cardNumber`, `cardnumber`, `card_number`.\n *   - Objects with data deeper than 3 levels of nesting will be stringified\n *   - All keys must be shorter than 32 characters\n *   - JSON payloads must be less than 5KB for non-enterprise users\n *\n * Calling `submiForm` with `FormData` instead of an JavaScript object works as well. In addition, if your form contains `<select multiple>`, that value will\n * be automatically converted to an array of strings instead of a comma-delimited string. This is for your convenience.\n *\n * @public\n */\nexport type SubmitData = Record<string, any> | FormData;\n\n/**\n * Submission JSON response shape.\n *\n * @public\n */\nexport interface SubmitSuccess {\n  /** Was the submission successful? */\n  ok: boolean;\n}\n\n/**\n * HTTP client returned by fetch factory\n *\n * @public\n */\nexport type _Fetcher = (\n  endpoint: string,\n  options?: RequestInit\n) => Promise<any>;\n\n/**\n * Results of paginated resource request\n * @public\n */\nexport type Results<T> = {\n  /** List of results returned */\n  data: T[];\n  /** Identifier to return the next item in the sequence */\n  next?: string;\n};\n\n/**\n * Paginated resource query\n * @public\n */\nexport interface PaginatedQuery {\n  /**\n   * Pagination cursor id\n   */\n  from?: string;\n  /**\n   * Number of results to return. Max is 100.\n   */\n  limit?: number;\n}\n/** @public */\nexport interface FindFormsQuery extends PaginatedQuery {\n  /** With given Action id */\n  actionId?: string;\n  /** Return forms that have been updated starting at this date */\n  updateStartAt?: string;\n}\n\n/**  @public */\nexport interface FindSubmitsQuery extends PaginatedQuery {\n  /** With given Form id */\n  formId: string;\n  /** Sort by (-createAt, createAt) */\n  sort?: '-createAt' | 'createAt';\n}\n\n/**  @public */\nexport interface DeleteSubmitsQuery {\n  /** List of Submission ids to delete */\n  ids: string;\n}\n\n/** @public */\nexport interface GetFormQuery {\n  /** The id of the Revision */\n  revisionId?: string;\n}\n\n/**\n * Formium Client\n *\n * @public\n */\nexport class FormiumClient {\n  /** Project ID */\n  projectId: string;\n  /** API endpoint */\n  baseUrl: string;\n  /**  Internal HTTP client */\n  _fetcher: _Fetcher;\n\n  constructor(projectId: string, options?: Options) {\n    this.projectId = projectId;\n    this.baseUrl = options?.baseUrl ?? 'https://api.formium.io';\n    this._fetcher = _createFetcher(\n      this.baseUrl,\n      options?.fetchImplementation ?? fetch,\n      options?.apiToken\n    );\n  }\n\n  /**\n   * Return Forms in a project\n   *\n   * @param query - Query parameters\n   * @param fetchOptions - Additional request options\n   * @returns A list of Forms\n   * @public\n   */\n  findForms(\n    query?: FindFormsQuery,\n    fetchOptions?: RequestInit\n  ): Promise<Results<Form>> {\n    let url =\n      `/v1/form?` + qs.stringify({ projectId: this.projectId, ...query });\n    return this._fetcher(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...fetchOptions,\n    });\n  }\n\n  /**\n   * Return the current User (based on the token)\n   * @returns A User\n   * @public\n   */\n  getMe(fetchOptions?: RequestInit): Promise<User> {\n    let url = `/v1/user/me`;\n    return this._fetcher(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...fetchOptions,\n    });\n  }\n\n  /**\n   * Return a Project by id\n   *\n   * @param id - Project id\n   * @param fetchOptions - fetch overrides\n   * @returns A Project\n   * @public\n   */\n  getProject(id: string, fetchOptions?: RequestInit): Promise<Project> {\n    let url = `/v1/project/` + id;\n\n    return this._fetcher(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...fetchOptions,\n    });\n  }\n\n  /**\n   * Retrieve the Projects the user belongs to\n   * @returns A list of Projects\n   * @public\n   */\n  getMyProjects(fetchOptions?: RequestInit): Promise<Results<Project>> {\n    let url = `/v1/project/me`;\n    return this._fetcher(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...fetchOptions,\n    });\n  }\n\n  /**\n   * Delete the current Oauth2 bearer token (for signout)\n   *\n   * @public\n   */\n  logout(fetchOptions?: RequestInit) {\n    let url = `/oauth/token/me`;\n    return this._fetcher(url, {\n      method: 'DELETE',\n      ...fetchOptions,\n    });\n  }\n\n  /**\n   * Return a Project by slug\n   * @param projectSlug - A Project slug\n   * @returns A Project\n   * @public\n   */\n  getProjectBySlug(\n    projectSlug: string,\n    fetchOptions?: RequestInit\n  ): Promise<Project> {\n    let url = `/v1/project/slug` + projectSlug;\n\n    return this._fetcher(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...fetchOptions,\n    });\n  }\n\n  /**\n   * Return a Form based on its slug\n   *\n   * @param formSlug - form slug\n   * @param query - Query parameters\n   * @param fetchOptions - Additional request options\n   * @returns A Form\n   * @public\n   */\n  getFormBySlug(\n    formSlug: string,\n    query?: GetFormQuery,\n    fetchOptions?: RequestInit\n  ): Promise<Form> {\n    let url = `/v1/form/id/${this.projectId}/${formSlug}`;\n    let options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...fetchOptions,\n    };\n\n    if (query && query.revisionId) {\n      (options as any).headers['X-Formik-Revision'] = query.revisionId;\n    }\n\n    return this._fetcher(url, options);\n  }\n\n  /**\n   * Return a Submission\n   *\n   * @param submitId - The id of the submission\n   * @param fetchOptions - Additional request options\n   * @returns A Submission\n   * @public\n   */\n  getSubmit(submitId: string, fetchOptions?: RequestInit): Promise<Submit> {\n    let url = `/v1/submit/${submitId}`;\n    let options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...fetchOptions,\n    };\n\n    return this._fetcher(url, options);\n  }\n\n  /**\n   * Delete a Submission\n   *\n   * @param submitId - The id of the Submission\n   * @param fetchOptions - Additional request options\n   * @public\n   */\n  deleteSubmit(submitId: string, fetchOptions?: RequestInit): Promise<void> {\n    let url = `/v1/submit/${submitId}`;\n    let options = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...fetchOptions,\n    };\n\n    return this._fetcher(url, options);\n  }\n\n  /**\n   * Delete mulitple Submissions\n   *\n   * @param query - Query parameters\n   * @param fetchOptions - Additional request options\n   * @public\n   */\n  deleteSubmits(\n    query: DeleteSubmitsQuery,\n    fetchOptions?: RequestInit\n  ): Promise<void> {\n    let url = `/v1/submit?` + qs.stringify(query);\n    let options = {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...fetchOptions,\n    };\n\n    return this._fetcher(url, options);\n  }\n\n  /**\n   * Find Submissions of a given form\n   *\n   * @param query - Query parameters\n   * @param fetchOptions - Additional request options\n   * @returns A list of Submissions\n   * @public\n   */\n  findSubmits(\n    query: FindSubmitsQuery,\n    fetchOptions?: RequestInit\n  ): Promise<Results<Project>> {\n    let url = `/v1/submit?` + qs.stringify(query);\n    return this._fetcher(url, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...fetchOptions,\n    });\n  }\n\n  /**\n   * Return a Form given its id\n   *\n   * @param formSlug - form slug\n   * @param query - Query parameters\n   * @param fetchOptions - Additional request options\n   * @returns A Form entity\n   * @public\n   */\n  getFormById(\n    id: string,\n    query?: GetFormQuery,\n    fetchOptions?: RequestInit\n  ): Promise<Form> {\n    let url = `/v1/form/${id}`;\n    let options = {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      ...fetchOptions,\n    };\n\n    if (query && query.revisionId) {\n      (options as any).headers['X-Formik-Revision'] = query.revisionId;\n    }\n\n    return this._fetcher(url, options);\n  }\n\n  /**\n   * Submit data to a Form\n   *\n   * @param formSlug - Slug of the Form\n   * @param data - An object or FormData instance containing submission data.\n   * @public\n   */\n  submitForm(formSlug: string, data: SubmitData): Promise<void> {\n    let values: string;\n    // Convert form data into object and handle arrays (i.e. select multiple)\n    if (data instanceof FormData) {\n      let obj: Record<string, any> = {};\n      for (const [key, value] of (data as FormData) as any) {\n        if (!obj.hasOwnProperty(key)) {\n          obj[key] = value;\n          continue;\n        }\n        if (!Array.isArray(obj[key])) {\n          obj[key] = [obj[key]];\n        }\n        obj[key].push(value);\n      }\n      values = JSON.stringify(obj);\n    } else {\n      values = JSON.stringify(data);\n    }\n\n    return this._fetcher(`/submit/${this.projectId}/${formSlug}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: values,\n    });\n  }\n\n  /**\n   * Upload a file to Formium. All uploads are private by default.\n   *\n   * @param formSlug - Slug of the Form\n   * @param file - File to be uploaded\n   * @returns URI of the uploaded file\n   * @public\n   */\n  uploadFile(formSlug: string, file: File): Promise<string | null> {\n    let data = new FormData();\n    data.append('file', file);\n    return this._fetcher(`/submit/${this.projectId}/${formSlug}/upload`, {\n      method: 'POST',\n      body: data,\n    }).then(res => res.headers.get('Location'));\n  }\n}\n\n/**\n * Create a new Formium API client\n *\n * @param projectSlug - Project slug\n * @param options - Client options\n * @returns A FormiumClient\n * @public\n */\nexport function createClient(\n  projectSlug: string,\n  options?: Options\n): FormiumClient {\n  return new FormiumClient(projectSlug, options);\n}\n\nexport * from '@formium/types';\n"],"names":["APIError","message","response","body","status","serverMessage","retryAfter","Object","keys","field","headers","get","parseInt","Error","_createFetcher","baseUrl","fetchImplementation","apiToken","fetcher","endpoint","options","opts","__VERSION__","Authorization","then","res","bodyError","json","error","err","msg","Promise","reject","ok","includes","FormiumClient","projectId","_fetcher","fetch","findForms","query","fetchOptions","url","qs","stringify","method","getMe","getProject","id","getMyProjects","logout","getProjectBySlug","projectSlug","getFormBySlug","formSlug","revisionId","getSubmit","submitId","deleteSubmit","deleteSubmits","findSubmits","getFormById","submitForm","data","values","FormData","obj","key","value","hasOwnProperty","Array","isArray","push","JSON","uploadFile","file","append","createClient"],"mappings":"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"}