/**
 * Copyright (c) Formium, Inc. and its affiliates.
 *
 * This source code is licensed under the Business Source License license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
import 'cross-fetch/polyfill';
import { Submit, User, Form, Project } from '@formium/types';
/**
 * Create a wrapper around fetch() with API base URL and default headers.
 *
 * @param fetchImplementation - Fetch implmementation (useful of debugging/testing)
 * @param baseUrl - Base API URL
 *
 * @public
 */
export declare function _createFetcher(baseUrl: string, fetchImplementation: typeof fetch, apiToken?: string): (endpoint: string, options?: RequestInit) => Promise<any>;
/**
 * Formium Client options
 *
 * @public
 */
export interface Options {
    /** Base URL */
    baseUrl?: string;
    /** Custom fetch implementation (useful for mocking) */
    fetchImplementation?: any;
    /** API token */
    apiToken?: string;
}
/**
 * Submission data.
 *
 * @remarks
 * This can either be a plain JavaScript object or `FormData`. If `FormData` contains files,
 * the submission will be rejected. If your form contains file uploads, please upload them using `formium.uploadFile(formSlug, file)` first, and store the returned URL. For more information about uploads, please refer to `formium.uploadFile`.
 *
 * For security, Formium upholds the following limits on data that you should be aware of:
 *   - The following keys are banned: `pass`, `password`, `pw`, `ssn`, `cc`, `creditCard`, `credit_card`, `creditcard`, `cardNumber`, `cardnumber`, `card_number`.
 *   - Objects with data deeper than 3 levels of nesting will be stringified
 *   - All keys must be shorter than 32 characters
 *   - JSON payloads must be less than 5KB for non-enterprise users
 *
 * Calling `submiForm` with `FormData` instead of an JavaScript object works as well. In addition, if your form contains `<select multiple>`, that value will
 * be automatically converted to an array of strings instead of a comma-delimited string. This is for your convenience.
 *
 * @public
 */
export declare type SubmitData = Record<string, any> | FormData;
/**
 * Submission JSON response shape.
 *
 * @public
 */
export interface SubmitSuccess {
    /** Was the submission successful? */
    ok: boolean;
}
/**
 * HTTP client returned by fetch factory
 *
 * @public
 */
export declare type _Fetcher = (endpoint: string, options?: RequestInit) => Promise<any>;
/**
 * Results of paginated resource request
 * @public
 */
export declare type Results<T> = {
    /** List of results returned */
    data: T[];
    /** Identifier to return the next item in the sequence */
    next?: string;
};
/**
 * Paginated resource query
 * @public
 */
export interface PaginatedQuery {
    /**
     * Pagination cursor id
     */
    from?: string;
    /**
     * Number of results to return. Max is 100.
     */
    limit?: number;
}
/** @public */
export interface FindFormsQuery extends PaginatedQuery {
    /** With given Action id */
    actionId?: string;
    /** Return forms that have been updated starting at this date */
    updateStartAt?: string;
}
/**  @public */
export interface FindSubmitsQuery extends PaginatedQuery {
    /** With given Form id */
    formId: string;
    /** Sort by (-createAt, createAt) */
    sort?: '-createAt' | 'createAt';
}
/**  @public */
export interface DeleteSubmitsQuery {
    /** List of Submission ids to delete */
    ids: string;
}
/** @public */
export interface GetFormQuery {
    /** The id of the Revision */
    revisionId?: string;
}
/**
 * Formium Client
 *
 * @public
 */
export declare class FormiumClient {
    /** Project ID */
    projectId: string;
    /** API endpoint */
    baseUrl: string;
    /**  Internal HTTP client */
    _fetcher: _Fetcher;
    constructor(projectId: string, options?: Options);
    /**
     * Return Forms in a project
     *
     * @param query - Query parameters
     * @param fetchOptions - Additional request options
     * @returns A list of Forms
     * @public
     */
    findForms(query?: FindFormsQuery, fetchOptions?: RequestInit): Promise<Results<Form>>;
    /**
     * Return the current User (based on the token)
     * @returns A User
     * @public
     */
    getMe(fetchOptions?: RequestInit): Promise<User>;
    /**
     * Return a Project by id
     *
     * @param id - Project id
     * @param fetchOptions - fetch overrides
     * @returns A Project
     * @public
     */
    getProject(id: string, fetchOptions?: RequestInit): Promise<Project>;
    /**
     * Retrieve the Projects the user belongs to
     * @returns A list of Projects
     * @public
     */
    getMyProjects(fetchOptions?: RequestInit): Promise<Results<Project>>;
    /**
     * Delete the current Oauth2 bearer token (for signout)
     *
     * @public
     */
    logout(fetchOptions?: RequestInit): Promise<any>;
    /**
     * Return a Project by slug
     * @param projectSlug - A Project slug
     * @returns A Project
     * @public
     */
    getProjectBySlug(projectSlug: string, fetchOptions?: RequestInit): Promise<Project>;
    /**
     * Return a Form based on its slug
     *
     * @param formSlug - form slug
     * @param query - Query parameters
     * @param fetchOptions - Additional request options
     * @returns A Form
     * @public
     */
    getFormBySlug(formSlug: string, query?: GetFormQuery, fetchOptions?: RequestInit): Promise<Form>;
    /**
     * Return a Submission
     *
     * @param submitId - The id of the submission
     * @param fetchOptions - Additional request options
     * @returns A Submission
     * @public
     */
    getSubmit(submitId: string, fetchOptions?: RequestInit): Promise<Submit>;
    /**
     * Delete a Submission
     *
     * @param submitId - The id of the Submission
     * @param fetchOptions - Additional request options
     * @public
     */
    deleteSubmit(submitId: string, fetchOptions?: RequestInit): Promise<void>;
    /**
     * Delete mulitple Submissions
     *
     * @param query - Query parameters
     * @param fetchOptions - Additional request options
     * @public
     */
    deleteSubmits(query: DeleteSubmitsQuery, fetchOptions?: RequestInit): Promise<void>;
    /**
     * Find Submissions of a given form
     *
     * @param query - Query parameters
     * @param fetchOptions - Additional request options
     * @returns A list of Submissions
     * @public
     */
    findSubmits(query: FindSubmitsQuery, fetchOptions?: RequestInit): Promise<Results<Project>>;
    /**
     * Return a Form given its id
     *
     * @param formSlug - form slug
     * @param query - Query parameters
     * @param fetchOptions - Additional request options
     * @returns A Form entity
     * @public
     */
    getFormById(id: string, query?: GetFormQuery, fetchOptions?: RequestInit): Promise<Form>;
    /**
     * Submit data to a Form
     *
     * @param formSlug - Slug of the Form
     * @param data - An object or FormData instance containing submission data.
     * @public
     */
    submitForm(formSlug: string, data: SubmitData): Promise<void>;
    /**
     * Upload a file to Formium. All uploads are private by default.
     *
     * @param formSlug - Slug of the Form
     * @param file - File to be uploaded
     * @returns URI of the uploaded file
     * @public
     */
    uploadFile(formSlug: string, file: File): Promise<string | null>;
}
/**
 * Create a new Formium API client
 *
 * @param projectSlug - Project slug
 * @param options - Client options
 * @returns A FormiumClient
 * @public
 */
export declare function createClient(projectSlug: string, options?: Options): FormiumClient;
export * from '@formium/types';
