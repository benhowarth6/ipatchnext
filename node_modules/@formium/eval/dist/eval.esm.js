// taken initially from https://github.com/jlmessenger/json-conditions
var operations = {
  gte: function gte(fieldResolver, _ref) {
    var valueA = _ref[0],
        valueB = _ref[1];
    var a = evaluateLogic(fieldResolver, valueA);
    var b = evaluateLogic(fieldResolver, valueB);
    console.log('  greater than or equal:', a >= b);
    return a >= b;
  },
  lte: function lte(fieldResolver, _ref2) {
    var valueA = _ref2[0],
        valueB = _ref2[1];
    var a = evaluateLogic(fieldResolver, valueA);
    var b = evaluateLogic(fieldResolver, valueB);
    console.log('  less than or equal:', a <= b);
    return a <= b;
  },
  lt: function lt(fieldResolver, _ref3) {
    var valueA = _ref3[0],
        valueB = _ref3[1];
    var a = evaluateLogic(fieldResolver, valueA);
    var b = evaluateLogic(fieldResolver, valueB);
    console.log('  less than:', a < b);
    return a < b;
  },
  gt: function gt(fieldResolver, _ref4) {
    var valueA = _ref4[0],
        valueB = _ref4[1];
    var a = evaluateLogic(fieldResolver, valueA);
    var b = evaluateLogic(fieldResolver, valueB);
    console.log('  greater than:', a > b);
    return a > b;
  },
  contains: function contains(fieldResolver, _ref5) {
    var valueA = _ref5[0],
        valueB = _ref5[1];
    var a = evaluateLogic(fieldResolver, valueA);
    var b = evaluateLogic(fieldResolver, valueB);
    console.log('  contains:', a.includes(b));
    return a.includes(b);
  },
  ncontains: function ncontains(fieldResolver, _ref6) {
    var valueA = _ref6[0],
        valueB = _ref6[1];
    var a = evaluateLogic(fieldResolver, valueA);
    var b = evaluateLogic(fieldResolver, valueB);
    console.log('  not contains:', !a.includes(b));
    return !a.includes(b);
  },
  startsWith: function startsWith(fieldResolver, _ref7) {
    var valueA = _ref7[0],
        valueB = _ref7[1];
    var a = evaluateLogic(fieldResolver, valueA);
    var b = evaluateLogic(fieldResolver, valueB);
    console.log('  startsWith:', a.startsWith(b));
    return a.startsWith(b);
  },
  endsWith: function endsWith(fieldResolver, _ref8) {
    var valueA = _ref8[0],
        valueB = _ref8[1];
    var a = evaluateLogic(fieldResolver, valueA);
    var b = evaluateLogic(fieldResolver, valueB);
    var result = a.endsWith(b);
    console.log('  endsWith:', result);
    return a.startsWith(b);
  },
  eq: function eq(fieldResolver, _ref9) {
    var valueA = _ref9[0],
        valueB = _ref9[1];
    var a = evaluateLogic(fieldResolver, valueA);
    var b = evaluateLogic(fieldResolver, valueB);
    console.log('  equal:', a === b);
    console.log('a is an array', Array.isArray(a)); // @todo confirm this is desired logic
    // When we have an array value for a field (e.g. checkboxes),
    // we alter evaluation to .includes so that the UI works as expected.

    if (Array.isArray(a)) {
      return a.includes(b);
    }

    return a === b;
  },
  ne: function ne(fieldResolver, _ref10) {
    var valueA = _ref10[0],
        valueB = _ref10[1];
    var a = evaluateLogic(fieldResolver, valueA);
    var b = evaluateLogic(fieldResolver, valueB);
    console.log('  not equal:', a !== b);
    return a !== b;
  },
  and: function and(fieldResolver, conditions) {
    var foundFalse = conditions.some(function (condition) {
      return !evaluateLogic(fieldResolver, condition);
    });
    console.log('  and:', !foundFalse);
    return !foundFalse; // want all true
  },
  or: function or(fieldResolver, conditions) {
    var foundTrue = conditions.some(function (condition) {
      return evaluateLogic(fieldResolver, condition);
    });
    console.log('  or:', foundTrue);
    return foundTrue; // want any item true
  },
  // not(fieldResolver: LogicResolver, condition: any[]) {
  //   const x = evaluateLogic(fieldResolver, condition);
  //   console.log('  not:', !x);
  //   return !x;
  // },
  value: function value(_fieldResolver, literal) {
    console.log('  value:', literal);
    return literal;
  },
  choice: function choice(fieldResolver, fieldName) {
    var x = fieldResolver(fieldName);
    console.log("  choice " + fieldName + ":", x);
    return x;
  },
  field: function field(fieldResolver, fieldName) {
    var x = fieldResolver(fieldName);
    console.log("  field " + fieldName + ":", x);
    return x;
  }
};
function evaluateLogic(fieldResolver, conditionObject) {
  var methodName = conditionObject.op;

  if (methodName) {
    var fn = operations[methodName];
    var args = conditionObject.vars || conditionObject.value;
    return fn(fieldResolver, args);
  } else {
    throw new Error('Unknown method name');
  }
}

export { evaluateLogic };
//# sourceMappingURL=eval.esm.js.map
