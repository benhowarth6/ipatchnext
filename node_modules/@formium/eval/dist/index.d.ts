/**
 * Copyright (c) Formium, Inc. and its affiliates.
 *
 * This source code is licensed under the Business Source License found in the
 * LICENSE file in the root directory of this source tree.
 */
export declare type LogicResolver = (name: string) => any;
declare const operations: {
    gte(fieldResolver: LogicResolver, [valueA, valueB]: any[]): boolean;
    lte(fieldResolver: LogicResolver, [valueA, valueB]: any[]): boolean;
    lt(fieldResolver: LogicResolver, [valueA, valueB]: any[]): boolean;
    gt(fieldResolver: LogicResolver, [valueA, valueB]: any[]): boolean;
    contains(fieldResolver: LogicResolver, [valueA, valueB]: string[]): boolean;
    ncontains(fieldResolver: LogicResolver, [valueA, valueB]: string[]): boolean;
    startsWith(fieldResolver: LogicResolver, [valueA, valueB]: string[]): boolean;
    endsWith(fieldResolver: LogicResolver, [valueA, valueB]: string[]): boolean;
    eq(fieldResolver: LogicResolver, [valueA, valueB]: any[]): boolean;
    ne(fieldResolver: LogicResolver, [valueA, valueB]: any[]): boolean;
    and(fieldResolver: LogicResolver, conditions: any[]): boolean;
    or(fieldResolver: LogicResolver, conditions: []): boolean;
    value(_fieldResolver: LogicResolver, literal: any): any;
    choice(fieldResolver: LogicResolver, fieldName: string): any;
    field(fieldResolver: LogicResolver, fieldName: string): any;
};
export declare type OpsKeys = Extract<keyof typeof operations, string>;
export declare type LogicCondition = {
    op: OpsKeys;
    vars?: LogicCondition[];
    field?: string;
    value?: any;
    choice?: string;
};
export declare function evaluateLogic(fieldResolver: LogicResolver, conditionObject: LogicCondition): any;
export {};
