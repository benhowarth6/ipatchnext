{"version":3,"file":"eval.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) Formium, Inc. and its affiliates.\n *\n * This source code is licensed under the Business Source License found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport type LogicResolver = (name: string) => any;\n\n// taken initially from https://github.com/jlmessenger/json-conditions\nconst operations = {\n  gte(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  greater than or equal:', a >= b);\n    return a >= b;\n  },\n  lte(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  less than or equal:', a <= b);\n    return a <= b;\n  },\n  lt(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  less than:', a < b);\n    return a < b;\n  },\n  gt(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  greater than:', a > b);\n    return a > b;\n  },\n  contains(fieldResolver: LogicResolver, [valueA, valueB]: string[]) {\n    const a: string = evaluateLogic(fieldResolver, valueA as any);\n    const b: string = evaluateLogic(fieldResolver, valueB as any);\n    console.log('  contains:', a.includes(b));\n    return a.includes(b);\n  },\n  ncontains(fieldResolver: LogicResolver, [valueA, valueB]: string[]) {\n    const a: string = evaluateLogic(fieldResolver, valueA as any);\n    const b: string = evaluateLogic(fieldResolver, valueB as any);\n    console.log('  not contains:', !a.includes(b));\n    return !a.includes(b);\n  },\n  startsWith(fieldResolver: LogicResolver, [valueA, valueB]: string[]) {\n    const a: string = evaluateLogic(fieldResolver, valueA as any);\n    const b: string = evaluateLogic(fieldResolver, valueB as any);\n\n    console.log('  startsWith:', a.startsWith(b));\n    return a.startsWith(b);\n  },\n  endsWith(fieldResolver: LogicResolver, [valueA, valueB]: string[]) {\n    const a: string = evaluateLogic(fieldResolver, valueA as any);\n    const b: string = evaluateLogic(fieldResolver, valueB as any);\n    const result = a.endsWith(b);\n    console.log('  endsWith:', result);\n    return a.startsWith(b);\n  },\n  eq(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  equal:', a === b);\n    console.log('a is an array', Array.isArray(a));\n    // @todo confirm this is desired logic\n    // When we have an array value for a field (e.g. checkboxes),\n    // we alter evaluation to .includes so that the UI works as expected.\n    if (Array.isArray(a)) {\n      return a.includes(b);\n    }\n    return a === b;\n  },\n  ne(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  not equal:', a !== b);\n    return a !== b;\n  },\n  and(fieldResolver: LogicResolver, conditions: any[]) {\n    const foundFalse = conditions.some(\n      condition => !evaluateLogic(fieldResolver, condition)\n    );\n    console.log('  and:', !foundFalse);\n    return !foundFalse; // want all true\n  },\n  or(fieldResolver: LogicResolver, conditions: []) {\n    const foundTrue = conditions.some(condition =>\n      evaluateLogic(fieldResolver, condition)\n    );\n    console.log('  or:', foundTrue);\n    return foundTrue; // want any item true\n  },\n  // not(fieldResolver: LogicResolver, condition: any[]) {\n  //   const x = evaluateLogic(fieldResolver, condition);\n  //   console.log('  not:', !x);\n  //   return !x;\n  // },\n  value(_fieldResolver: LogicResolver, literal: any) {\n    console.log('  value:', literal);\n    return literal;\n  },\n  choice(fieldResolver: LogicResolver, fieldName: string) {\n    const x = fieldResolver(fieldName);\n    console.log(`  choice ${fieldName}:`, x);\n    return x;\n  },\n  field(fieldResolver: LogicResolver, fieldName: string) {\n    const x = fieldResolver(fieldName);\n    console.log(`  field ${fieldName}:`, x);\n    return x;\n  },\n};\n\nexport type OpsKeys = Extract<keyof typeof operations, string>;\n\nexport type LogicCondition = {\n  op: OpsKeys;\n  vars?: LogicCondition[];\n  field?: string;\n  value?: any;\n  choice?: string;\n};\n\nexport function evaluateLogic(\n  fieldResolver: LogicResolver,\n  conditionObject: LogicCondition\n): any {\n  const methodName = conditionObject.op;\n  if (methodName) {\n    const fn = operations[methodName];\n    const args = conditionObject.vars || conditionObject.value;\n    return fn(fieldResolver, args);\n  } else {\n    throw new Error('Unknown method name');\n  }\n}\n"],"names":["operations","gte","fieldResolver","valueB","a","evaluateLogic","b","console","log","lte","lt","gt","contains","includes","ncontains","startsWith","endsWith","result","eq","Array","isArray","ne","and","conditions","foundFalse","some","condition","or","foundTrue","value","_fieldResolver","literal","choice","fieldName","x","field","conditionObject","methodName","op","fn","vars","Error"],"mappings":"oEASA,IAAMA,EAAa,CACjBC,aAAIC,SAAuCC,OACnCC,EAAIC,EAAcH,QAClBI,EAAID,EAAcH,EAAeC,UACvCI,QAAQC,IAAI,2BAA4BJ,GAAKE,GACtCF,GAAKE,GAEdG,aAAIP,SAAuCC,OACnCC,EAAIC,EAAcH,QAClBI,EAAID,EAAcH,EAAeC,UACvCI,QAAQC,IAAI,wBAAyBJ,GAAKE,GACnCF,GAAKE,GAEdI,YAAGR,SAAuCC,OAClCC,EAAIC,EAAcH,QAClBI,EAAID,EAAcH,EAAeC,UACvCI,QAAQC,IAAI,eAAgBJ,EAAIE,GACzBF,EAAIE,GAEbK,YAAGT,SAAuCC,OAClCC,EAAIC,EAAcH,QAClBI,EAAID,EAAcH,EAAeC,UACvCI,QAAQC,IAAI,kBAAmBJ,EAAIE,GAC5BF,EAAIE,GAEbM,kBAASV,SAAuCC,OACxCC,EAAYC,EAAcH,QAC1BI,EAAYD,EAAcH,EAAeC,UAC/CI,QAAQC,IAAI,cAAeJ,EAAES,SAASP,IAC/BF,EAAES,SAASP,IAEpBQ,mBAAUZ,SAAuCC,OACzCC,EAAYC,EAAcH,QAC1BI,EAAYD,EAAcH,EAAeC,UAC/CI,QAAQC,IAAI,mBAAoBJ,EAAES,SAASP,KACnCF,EAAES,SAASP,IAErBS,oBAAWb,SAAuCC,OAC1CC,EAAYC,EAAcH,QAC1BI,EAAYD,EAAcH,EAAeC,UAE/CI,QAAQC,IAAI,gBAAiBJ,EAAEW,WAAWT,IACnCF,EAAEW,WAAWT,IAEtBU,kBAASd,SAAuCC,OACxCC,EAAYC,EAAcH,QAC1BI,EAAYD,EAAcH,EAAeC,GACzCc,EAASb,EAAEY,SAASV,UAC1BC,QAAQC,IAAI,cAAeS,GACpBb,EAAEW,WAAWT,IAEtBY,YAAGhB,SAAuCC,OAClCC,EAAIC,EAAcH,QAClBI,EAAID,EAAcH,EAAeC,UACvCI,QAAQC,IAAI,WAAYJ,IAAME,GAC9BC,QAAQC,IAAI,gBAAiBW,MAAMC,QAAQhB,IAIvCe,MAAMC,QAAQhB,GACTA,EAAES,SAASP,GAEbF,IAAME,GAEfe,YAAGnB,SAAuCC,OAClCC,EAAIC,EAAcH,QAClBI,EAAID,EAAcH,EAAeC,UACvCI,QAAQC,IAAI,eAAgBJ,IAAME,GAC3BF,IAAME,GAEfgB,aAAIpB,EAA8BqB,OAC1BC,EAAaD,EAAWE,MAC5B,SAAAC,UAAcrB,EAAcH,EAAewB,aAE7CnB,QAAQC,IAAI,UAAWgB,IACfA,GAEVG,YAAGzB,EAA8BqB,OACzBK,EAAYL,EAAWE,MAAK,SAAAC,UAChCrB,EAAcH,EAAewB,aAE/BnB,QAAQC,IAAI,QAASoB,GACdA,GAOTC,eAAMC,EAA+BC,UACnCxB,QAAQC,IAAI,WAAYuB,GACjBA,GAETC,gBAAO9B,EAA8B+B,OAC7BC,EAAIhC,EAAc+B,UACxB1B,QAAQC,gBAAgByB,MAAcC,GAC/BA,GAETC,eAAMjC,EAA8B+B,OAC5BC,EAAIhC,EAAc+B,UACxB1B,QAAQC,eAAeyB,MAAcC,GAC9BA,aAcK7B,EACdH,EACAkC,OAEMC,EAAaD,EAAgBE,MAC/BD,SAGKE,EAFIvC,EAAWqC,IAEZnC,EADGkC,EAAgBI,MAAQJ,EAAgBP,aAG/C,IAAIY,MAAM"}