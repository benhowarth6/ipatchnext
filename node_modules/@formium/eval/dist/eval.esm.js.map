{"version":3,"file":"eval.esm.js","sources":["../src/index.ts"],"sourcesContent":["/**\n * Copyright (c) Formium, Inc. and its affiliates.\n *\n * This source code is licensed under the Business Source License found in the\n * LICENSE file in the root directory of this source tree.\n */\nexport type LogicResolver = (name: string) => any;\n\n// taken initially from https://github.com/jlmessenger/json-conditions\nconst operations = {\n  gte(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  greater than or equal:', a >= b);\n    return a >= b;\n  },\n  lte(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  less than or equal:', a <= b);\n    return a <= b;\n  },\n  lt(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  less than:', a < b);\n    return a < b;\n  },\n  gt(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  greater than:', a > b);\n    return a > b;\n  },\n  contains(fieldResolver: LogicResolver, [valueA, valueB]: string[]) {\n    const a: string = evaluateLogic(fieldResolver, valueA as any);\n    const b: string = evaluateLogic(fieldResolver, valueB as any);\n    console.log('  contains:', a.includes(b));\n    return a.includes(b);\n  },\n  ncontains(fieldResolver: LogicResolver, [valueA, valueB]: string[]) {\n    const a: string = evaluateLogic(fieldResolver, valueA as any);\n    const b: string = evaluateLogic(fieldResolver, valueB as any);\n    console.log('  not contains:', !a.includes(b));\n    return !a.includes(b);\n  },\n  startsWith(fieldResolver: LogicResolver, [valueA, valueB]: string[]) {\n    const a: string = evaluateLogic(fieldResolver, valueA as any);\n    const b: string = evaluateLogic(fieldResolver, valueB as any);\n\n    console.log('  startsWith:', a.startsWith(b));\n    return a.startsWith(b);\n  },\n  endsWith(fieldResolver: LogicResolver, [valueA, valueB]: string[]) {\n    const a: string = evaluateLogic(fieldResolver, valueA as any);\n    const b: string = evaluateLogic(fieldResolver, valueB as any);\n    const result = a.endsWith(b);\n    console.log('  endsWith:', result);\n    return a.startsWith(b);\n  },\n  eq(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  equal:', a === b);\n    console.log('a is an array', Array.isArray(a));\n    // @todo confirm this is desired logic\n    // When we have an array value for a field (e.g. checkboxes),\n    // we alter evaluation to .includes so that the UI works as expected.\n    if (Array.isArray(a)) {\n      return a.includes(b);\n    }\n    return a === b;\n  },\n  ne(fieldResolver: LogicResolver, [valueA, valueB]: any[]) {\n    const a = evaluateLogic(fieldResolver, valueA);\n    const b = evaluateLogic(fieldResolver, valueB);\n    console.log('  not equal:', a !== b);\n    return a !== b;\n  },\n  and(fieldResolver: LogicResolver, conditions: any[]) {\n    const foundFalse = conditions.some(\n      condition => !evaluateLogic(fieldResolver, condition)\n    );\n    console.log('  and:', !foundFalse);\n    return !foundFalse; // want all true\n  },\n  or(fieldResolver: LogicResolver, conditions: []) {\n    const foundTrue = conditions.some(condition =>\n      evaluateLogic(fieldResolver, condition)\n    );\n    console.log('  or:', foundTrue);\n    return foundTrue; // want any item true\n  },\n  // not(fieldResolver: LogicResolver, condition: any[]) {\n  //   const x = evaluateLogic(fieldResolver, condition);\n  //   console.log('  not:', !x);\n  //   return !x;\n  // },\n  value(_fieldResolver: LogicResolver, literal: any) {\n    console.log('  value:', literal);\n    return literal;\n  },\n  choice(fieldResolver: LogicResolver, fieldName: string) {\n    const x = fieldResolver(fieldName);\n    console.log(`  choice ${fieldName}:`, x);\n    return x;\n  },\n  field(fieldResolver: LogicResolver, fieldName: string) {\n    const x = fieldResolver(fieldName);\n    console.log(`  field ${fieldName}:`, x);\n    return x;\n  },\n};\n\nexport type OpsKeys = Extract<keyof typeof operations, string>;\n\nexport type LogicCondition = {\n  op: OpsKeys;\n  vars?: LogicCondition[];\n  field?: string;\n  value?: any;\n  choice?: string;\n};\n\nexport function evaluateLogic(\n  fieldResolver: LogicResolver,\n  conditionObject: LogicCondition\n): any {\n  const methodName = conditionObject.op;\n  if (methodName) {\n    const fn = operations[methodName];\n    const args = conditionObject.vars || conditionObject.value;\n    return fn(fieldResolver, args);\n  } else {\n    throw new Error('Unknown method name');\n  }\n}\n"],"names":["operations","gte","fieldResolver","valueA","valueB","a","evaluateLogic","b","console","log","lte","lt","gt","contains","includes","ncontains","startsWith","endsWith","result","eq","Array","isArray","ne","and","conditions","foundFalse","some","condition","or","foundTrue","value","_fieldResolver","literal","choice","fieldName","x","field","conditionObject","methodName","op","fn","args","vars","Error"],"mappings":"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"}