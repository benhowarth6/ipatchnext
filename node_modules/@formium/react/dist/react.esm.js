import { FormElementType, FormElementActionDetailsToType, FormElementActionAction } from '@formium/types';
import { canUseDOM } from '@formium/utils';
import { useFormikContext, getIn, Field, useFormik, FormikContext, Form } from 'formik';
import React__default, { useLayoutEffect, useEffect, memo, useMemo, useRef, useState, createElement, useCallback, Fragment, Children } from 'react';
import { object, array, string, date, boolean, number } from 'yup';
import { evaluateLogic } from '@formium/eval';

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/**
 * Copyright (c) Formium, Inc. and its affiliates.
 *
 * This source code is licensed under the Business Source License license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */

var useIsomorphicLayoutEffect = /*#__PURE__*/canUseDOM() ? useLayoutEffect : useEffect;

/**
 * Copyright (c) Formium, Inc. and its affiliates.
 *
 * This source code is licensed under the Business Source License found in the
 * LICENSE file in the root directory of this source tree.
 */

var makeResolver = function makeResolver(values) {
  return function (path) {
    return getIn(values, path);
  };
};

var shouldExecuteAction = function shouldExecuteAction(valuesMap, touched, element, condition) {
  if (element.type === FormElementType.RADIO || element.type === FormElementType.CHECKBOX) {
    return evaluateLogic(makeResolver(valuesMap), condition);
  } else if (getIn(touched, element.slug)) {
    return evaluateLogic(makeResolver(valuesMap), condition);
  }

  return false;
};

function getChoiceMap(fields) {
  var items = {};
  Object.values(fields).filter(function (i) {
    return i.type === FormElementType.CHOICE;
  }).reduce(function (prev, curr) {
    prev[curr.id] = curr;
    return prev;
  }, {});
  return items;
}

function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  var ref = useRef(); // Store current value in ref

  useEffect(function () {
    ref.current = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)

  return ref.current;
}

var unstable_FormiumLogic = /*#__PURE__*/memo(function (_ref) {
  var form = _ref.form,
      element = _ref.element,
      setFieldProperty = _ref.setFieldProperty;

  var _useFormikContext = useFormikContext(),
      values = _useFormikContext.values,
      touched = _useFormikContext.touched;

  var _form$schema = form.schema;
  _form$schema = _form$schema === void 0 ? {} : _form$schema;
  var fields = _form$schema.fields;
  var valuesMap = useMemo(function () {
    return Object.values(fields || {}).reduce(function (prev, curr) {
      if (curr.type === FormElementType.CHOICE) {
        prev[curr.slug] = curr.title;
      } else if (curr.type !== FormElementType.PAGE && curr.type !== FormElementType.GROUP) {
        prev[curr.id] = values[curr.slug];
      }

      return prev;
    }, {});
  }, [values]);
  var previous = usePrevious(valuesMap);
  useEffect(function () {
    if (element.actions && element.actions.length > 0 && element.actions.forEach) {
      element.actions.forEach(function (item) {
        // Field-level actions
        if (item.details.to.type === FormElementActionDetailsToType.FIELD) {
          // hide
          if (item.action === FormElementActionAction.HIDE) {
            setFieldProperty(item.details.to.value, {
              hidden: shouldExecuteAction(valuesMap, touched, element, item.condition) ? true : false
            });
          } // show


          if (item.action === FormElementActionAction.SHOW) {
            setFieldProperty(item.details.to.value, {
              hidden: shouldExecuteAction(valuesMap, touched, element, item.condition) ? false : true
            });
          }
        }
      });
    }
  }, [valuesMap, setFieldProperty, previous, touched]);
  return null;
});
unstable_FormiumLogic.displayName = 'FormiumLogic';

/**
 * Copyright (c) Formium, Inc. and its affiliates.
 *
 * This source code is licensed under the Business Source License license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */
var TextInput = /*#__PURE__*/React__default.memo(function TextInput(props) {
  return React__default.createElement("input", Object.assign({}, props, {
    type: "text",
    placeholder: "Type your answer here"
  }));
});
var Textarea = /*#__PURE__*/React__default.memo(function Textarea(props) {
  return React__default.createElement("textarea", Object.assign({}, props, {
    rows: 5,
    placeholder: "Type your answer here"
  }));
});
var Checkbox = /*#__PURE__*/React__default.memo(function Checkbox(props) {
  return React__default.createElement("div", null, React__default.createElement("input", {
    id: props.id,
    type: "checkbox",
    value: props.value,
    checked: props.checked,
    onChange: props.onChange,
    onBlur: props.onBlur,
    disabled: props.disabled
  }), React__default.createElement("label", {
    htmlFor: props.id
  }, props.label));
});
var Radio = /*#__PURE__*/React__default.memo(function Radio(props) {
  return React__default.createElement("div", null, React__default.createElement("input", {
    id: props.id,
    type: "radio",
    value: props.value,
    checked: props.checked,
    onChange: props.onChange,
    onBlur: props.onBlur,
    disabled: props.disabled
  }), React__default.createElement("label", {
    htmlFor: props.id
  }, props.label));
});

/**
 * Copyright (c) Formium, Inc. and its affiliates.
 *
 * This source code is licensed under the Business Source License found in the
 * LICENSE file in the root directory of this source tree.
 */
var useStorage = function useStorage(key, initialValue, options) {
  if (!canUseDOM) {
    return [initialValue, function () {}];
  } // Use provided serializer/deserializer or the default ones


  var serializer = options ? options.raw ? String : options.serializer : JSON.stringify;
  var deserializer = options ? options.raw ? String : options.deserializer : JSON.parse;

  var _useState = useState(function () {
    try {
      var sessionStorageValue = sessionStorage.getItem(key);

      if (sessionStorageValue !== null) {
        return deserializer(sessionStorageValue);
      } else {
        initialValue && sessionStorage.setItem(key, serializer(initialValue));
        return initialValue;
      }
    } catch (_unused) {
      // If user is in private mode or has storage restriction
      // sessionStorage can throw. JSON.parse and JSON.stringify
      // can throw, too.
      return initialValue;
    }
  }),
      state = _useState[0],
      setState = _useState[1];

  useEffect(function () {
    try {
      sessionStorage.setItem(key, serializer(state));
    } catch (_unused2) {// If user is in private mode or has storage restriction
      // sessionStorage can throw. Also JSON.stringify can throw.
    }
  }, [state]);
  return [state, setState];
};

var SubmitButton = function SubmitButton(props) {
  return createElement("button", Object.assign({
    type: "submit"
  }, props));
};

var NextButton = function NextButton(props) {
  return createElement("button", Object.assign({
    type: "button"
  }, props));
};

function Header(_ref) {
  var page = _ref.page,
      pageIndex = _ref.pageIndex;
  return createElement(Fragment, null, page.title ? pageIndex === 0 ? createElement("h1", null, page.title) : createElement("h2", null, page.title) : null, page.description ? createElement("p", null, page.description) : null);
}

var FormControl = /*#__PURE__*/memo(function FormControl(_ref2) {
  var children = _ref2.children,
      description = _ref2.description,
      error = _ref2.error,
      label = _ref2.label,
      labelFor = _ref2.labelFor;
  return createElement("div", null, label && createElement("label", {
    htmlFor: labelFor
  }, label), description && createElement("div", null, description), children, error && createElement("div", null, error));
});
var defaultComponents = {
  SubmitButton: SubmitButton,
  NextButton: NextButton,
  PreviousButton: NextButton,
  Header: Header,
  ElementsWrapper: function ElementsWrapper(_ref3) {
    var children = _ref3.children;
    return children;
  },
  PageWrapper: function PageWrapper(_ref4) {
    var children = _ref4.children;
    return children;
  },
  FooterWrapper: function FooterWrapper(_ref5) {
    var children = _ref5.children;
    return children;
  },
  FieldWrapper: function FieldWrapper(props) {
    return createElement("div", Object.assign({}, props));
  },
  FormControl: FormControl,
  TextInput: TextInput,
  Textarea: Textarea,
  Radio: Radio,
  Checkbox: Checkbox
};

var Page = function Page(_ref6) {
  var children = _ref6.children;
  return children;
};

Page.displayName = 'FormiumPage';
/**
 * Return the list of "input" elements from a form. This is every element
 * except for Groups, Pages, and Choices.
 *
 * @param form A formium form
 * @public
 * @alpha
 */

var getElementsFromForm = function getElementsFromForm(form) {
  var _form$schema;

  if (!form) {
    return [];
  }

  if (!((_form$schema = form.schema) === null || _form$schema === void 0 ? void 0 : _form$schema.fields)) {
    return [];
  }

  return Object.values(form.schema.fields).filter(function (i) {
    return i.type !== FormElementType.GROUP && i.type !== FormElementType.PAGE && i.type !== FormElementType.CHOICE;
  });
};
/**
 * Return a Yup object schema based on a list of form elements.
 *
 * @param inputElements - An array of expanded FormElements
 * @returns A Yup schema
 * @public
 * @alpha
 */

function getValidationSchema(inputElements) {
  return object(inputElements && inputElements.reduce(function (prev, curr) {
    var validation;

    if (curr.hidden) {
      return prev;
    } // @todo make this a switch


    if (curr.type === FormElementType.CHECKBOX) {
      validation = array().of(string());
    } else if (curr.type === FormElementType.RADIO && curr.children && curr.children.length > 0) {
      validation = string();

      if (!curr.allowOther) {
        validation = validation.oneOf(curr.children.map(function (c) {
          return c.title;
        }));
      }
    } else if (curr.type === FormElementType.SHORT_TEXT || curr.type === FormElementType.LONG_TEXT) {
      validation = string();

      if (curr.maxLength) {
        validation = validation.max(curr.maxLength, "Must be less than " + curr.maxLength);
      }
    } else if (curr.type === FormElementType.EMAIL) {
      validation = string().email('Invalid email');

      if (curr.maxLength) {
        validation = validation.max(curr.maxLength, "Must be less than " + curr.maxLength + " characters");
      }
    } else if (curr.type === FormElementType.PHONE_NUMBER) {
      validation = string();

      if (curr.maxLength) {
        validation = validation.max(curr.maxLength, "Must be less than " + curr.maxLength + " characters");
      }
    } else if (curr.type === FormElementType.DATE) {
      validation = date();
    } else if (curr.type === FormElementType.TIME) {
      validation = string();
    } else if (curr.type === FormElementType.URL) {
      validation = string().url('Invalid URL');

      if (curr.maxLength) {
        validation = validation.max(curr.maxLength, "Must be less than " + curr.maxLength + " characters");
      }
    } else if (curr.type === FormElementType.BOOLEAN) {
      validation = boolean();
    } else if (curr.type === FormElementType.NUMBER) {
      validation = number();

      if (curr.minValue) {
        validation = validation.min(curr.minValue, "Must be greater than " + curr.minValue);
      }

      if (curr.maxValue) {
        validation = validation.max(curr.maxValue, "Must be less than " + curr.maxValue);
      }
    }

    if (curr.required) {
      var _curr$requiredText;

      // @todo fix type
      validation = validation.required((_curr$requiredText = curr.requiredText) !== null && _curr$requiredText !== void 0 ? _curr$requiredText : 'This question requires an answer.');
    } // @todo fix type


    prev[curr.slug] = validation;
    return prev;
  }, {}));
}
/**
 * Return initial values given an array of form elements (i.e. like on a page)
 *
 * @param inputElements - An array of expanded FormElements
 * @typeParam Values - The shape of the values of your form (an object with keys matching those specified in the dashboard)
 * @returns Initial values for the array of elements / page. This does not include values set by dynamic population.
 * @public
 */

function getInitialValues(inputElements) {
  return inputElements.reduce(function (prev, curr) {
    if (curr.type === FormElementType.CHECKBOX) {
      prev[curr.slug] = [];
    } else {
      var _curr$defaultValue;

      prev[curr.slug] = (_curr$defaultValue = curr.defaultValue) !== null && _curr$defaultValue !== void 0 ? _curr$defaultValue : '';
    }

    return prev;
  }, {});
}

function denormalize(arr, get) {
  return arr && arr.map(function (id) {
    var el = get(id);
    return _extends({}, el, el.items && el.items.length > 0 ? {
      children: denormalize(el.items, get)
    } : {});
  });
}

var FormControlWrapper = /*#__PURE__*/memo(function (_ref7) {
  var Comp = _ref7.component,
      name = _ref7.name,
      props = _objectWithoutPropertiesLoose(_ref7, ["component", "name"]);

  var formik = useFormikContext();

  var _formik$getFieldMeta = formik.getFieldMeta(name),
      error = _formik$getFieldMeta.error,
      touched = _formik$getFieldMeta.touched;

  return createElement(Comp, Object.assign({}, props, {
    error: !!touched && !!error && error
  }));
});
/**
 * @public
 */

function FormiumForm(_ref8) {
  var _form$schema$pageIds, _form$schema2;

  var _data = _ref8.data,
      _ref8$components = _ref8.components,
      components = _ref8$components === void 0 ? defaultComponents : _ref8$components,
      props = _objectWithoutPropertiesLoose(_ref8, ["data", "components"]);

  var _React$useState = useState(_data),
      form = _React$useState[0],
      setForm = _React$useState[1];

  var children = denormalize((_form$schema$pageIds = form === null || form === void 0 ? void 0 : (_form$schema2 = form.schema) === null || _form$schema2 === void 0 ? void 0 : _form$schema2.pageIds) !== null && _form$schema$pageIds !== void 0 ? _form$schema$pageIds : [], function (id) {
    var _form$schema3;

    return form === null || form === void 0 ? void 0 : (_form$schema3 = form.schema) === null || _form$schema3 === void 0 ? void 0 : _form$schema3.fields[id];
  });
  var initialValues = getInitialValues(getElementsFromForm(form));
  var setFieldProperty = useCallback(function (id, partial) {
    setForm(function (f) {
      var _f$schema, _f$schema$fields, _f$schema2, _f$schema$fields$id, _f$schema3, _extends2;

      return _extends({}, f, {
        schema: _extends({}, (_f$schema = f.schema) !== null && _f$schema !== void 0 ? _f$schema : {}, {
          fields: _extends({}, (_f$schema$fields = (_f$schema2 = f.schema) === null || _f$schema2 === void 0 ? void 0 : _f$schema2.fields) !== null && _f$schema$fields !== void 0 ? _f$schema$fields : {}, (_extends2 = {}, _extends2[id] = _extends({}, (_f$schema$fields$id = (_f$schema3 = f.schema) === null || _f$schema3 === void 0 ? void 0 : _f$schema3.fields[id]) !== null && _f$schema$fields$id !== void 0 ? _f$schema$fields$id : {}, partial), _extends2))
        })
      });
    });
  }, [setForm]);
  return createElement(FormikWizard, Object.assign({
    components: components,
    initialValues: initialValues,
    data: _data
  }, props), children && children.map(function (page, pageIndex) {
    return createElement(Page, {
      key: page.id,
      validationSchema: getValidationSchema(children[pageIndex].children)
    }, createElement(components.PageWrapper, null, createElement(components.Header, {
      form: form,
      page: page,
      pageIndex: pageIndex
    }), createElement(components.ElementsWrapper, null, page.children && page.children.map(function (element, index) {
      var id = element.id,
          children = element.children,
          hidden = element.hidden,
          required = element.required,
          placeholder = element.placeholder,
          item = _objectWithoutPropertiesLoose(element, ["id", "children", "actions", "items", "hidden", "required", "requiredText", "defaultValue", "placeholder"]);

      if (hidden) {
        return null;
      }

      return createElement(components.FieldWrapper, {
        key: id
      }, createElement(unstable_FormiumLogic, {
        form: form,
        element: element,
        setFieldProperty: setFieldProperty
      }), item.type === FormElementType.SHORT_TEXT ? createElement(FormControlWrapper, {
        required: !!required,
        label: item.title,
        labelFor: id,
        name: item.slug,
        description: item.description,
        component: components.FormControl,
        disabled: false
      }, createElement(Field, {
        as: components.TextInput,
        name: item.slug,
        placeholder: placeholder,
        required: required,
        disabled: false,
        id: id,
        type: "text"
      })) : item.type === FormElementType.EMAIL ? createElement(FormControlWrapper, {
        required: !!required,
        label: item.title,
        labelFor: id,
        name: item.slug,
        description: item.description,
        component: components.FormControl,
        disabled: false
      }, createElement(Field, {
        as: components.TextInput,
        name: item.slug,
        placeholder: placeholder,
        required: required,
        id: id,
        type: "email"
      })) : item.type === FormElementType.URL ? createElement(FormControlWrapper, {
        required: !!required,
        label: item.title,
        labelFor: id,
        name: item.slug,
        description: item.description,
        component: components.FormControl,
        disabled: false
      }, createElement(Field, {
        as: components.TextInput,
        name: item.slug,
        placeholder: placeholder,
        required: required,
        id: id,
        type: "url"
      })) : item.type === FormElementType.RADIO ? createElement(FormControlWrapper, {
        required: !!required,
        label: item.title,
        labelFor: id,
        name: item.slug,
        description: item.description,
        component: components.FormControl,
        disabled: false
      }, components.RadioGroup ? createElement(Field, {
        as: components.RadioGroup,
        id: id,
        name: item.slug,
        required: !!required,
        disabled: false,
        options: children && children.length > 0 && children.map(function (c) {
          return {
            id: c.id,
            disabled: false,
            label: c.title,
            value: c.title
          };
        })
      }) : createElement(Fragment, null, children && children.length > 0 && children.map(function (c) {
        return createElement("div", {
          key: c.id
        }, createElement(Field, {
          as: components.Radio,
          value: c.title,
          label: c.title,
          type: "radio",
          name: item.slug,
          id: c.id
        }));
      }))) : item.type === FormElementType.CHECKBOX ? createElement(Fragment, null, createElement(FormControlWrapper, {
        required: !!required,
        label: item.title,
        labelFor: id,
        name: item.slug,
        description: item.description,
        component: components.FormControl,
        disabled: false
      }, children && children.length > 0 && children.map(function (c) {
        return createElement("div", {
          key: c.id
        }, createElement(Field, {
          as: components.Checkbox,
          role: "checkbox",
          value: c.title,
          label: c.title,
          type: "checkbox",
          name: item.slug,
          id: c.id
        }));
      }))) : item.type === FormElementType.LONG_TEXT ? createElement(FormControlWrapper, {
        required: !!required,
        label: item.title,
        labelFor: id,
        name: item.slug,
        description: item.description,
        component: components.FormControl,
        disabled: false
      }, createElement(Field, {
        as: components.Textarea,
        name: item.slug,
        placeholder: placeholder,
        required: required,
        id: id
      })) : null);
    }))));
  }));
}

var getFormPageStorageKey = function getFormPageStorageKey(id) {
  return "formium-" + id + "-form-page";
};

var getFormStateStorageKey = function getFormStateStorageKey(id) {
  return "formium-" + id + "-form-state";
};

function FormikWizard(_ref9) {
  var initialValues = _ref9.initialValues,
      children = _ref9.children,
      onSubmit = _ref9.onSubmit,
      _ref9$components = _ref9.components,
      components = _ref9$components === void 0 ? defaultComponents : _ref9$components,
      debug = _ref9.debug,
      props = _objectWithoutPropertiesLoose(_ref9, ["initialValues", "children", "onSubmit", "components", "debug"]);

  var id = props.data.id;
  var pageStorageKey = useMemo(function () {
    return getFormPageStorageKey(id);
  }, [id]);
  var stateStorageKey = useMemo(function () {
    return getFormStateStorageKey(id);
  }, [id]);

  var _useStorage = useStorage(pageStorageKey, 0),
      page = _useStorage[0],
      setPage = _useStorage[1];

  var _React$useState2 = useState(initialValues || {}),
      values = _React$useState2[0],
      setValues = _React$useState2[1];

  var next = useCallback(function (newValues) {
    if (children) {
      setPage(function (p) {
        return Math.min(p + 1, Children.toArray(children).length - 1);
      });
      setValues(newValues);
    }
  }, [setPage, setValues, children]);
  var previous = useCallback(function () {
    setPage(function (p) {
      return Math.max(p - 1, 0);
    });
  }, [setPage]);
  var validationSchema = useCallback(function (v) {
    var activePage = Children.toArray(children)[page];
    return activePage.props.validationSchema ? activePage.props.validationSchema : {};
  }, [children, page]);
  var handleSubmit = useCallback(function (currentValues, formikActions) {
    try {
      var _isLastPage = page === Children.count(children) - 1;

      if (_isLastPage) {
        return Promise.resolve(onSubmit(currentValues).then(function () {
          sessionStorage.removeItem(pageStorageKey);
          sessionStorage.removeItem(stateStorageKey);
        }));
      } else {
        formikActions.setTouched({});
        next(currentValues);
        return Promise.resolve();
      }
    } catch (e) {
      return Promise.reject(e);
    }
  }, [page, children, onSubmit, pageStorageKey, stateStorageKey, next]);
  var activePage = Children.toArray(children)[page];
  var isLastPage = page === Children.count(children) - 1;
  var formik = useFormik(_extends({
    initialValues: values,
    onSubmit: handleSubmit,
    // enableReinitialize: true,
    validationSchema: validationSchema
  }, props));
  var setFormikState = formik.setFormikState,
      formikValues = formik.values,
      touched = formik.touched,
      errors = formik.errors,
      formikInitialValues = formik.initialValues;
  useEffect(function () {
    if (canUseDOM()) {
      sessionStorage.setItem(stateStorageKey, JSON.stringify({
        values: formikValues,
        touched: touched,
        initialValues: formikInitialValues
      }));
    }
  }, [formikValues, touched, errors, formikInitialValues, stateStorageKey]);
  useIsomorphicLayoutEffect(function () {
    try {
      var maybeF = sessionStorage.getItem(stateStorageKey);

      if (maybeF) {
        var newState = JSON.parse(maybeF);
        setFormikState(newState);
      }
    } catch (_error) {}
  }, [setFormikState, stateStorageKey]);
  return createElement(FormikContext.Provider, {
    value: formik
  }, createElement(Form, null, createElement(Fragment, null, createElement(components.PageWrapper, null, activePage, createElement(components.FooterWrapper, null, page > 0 && createElement(components.PreviousButton, {
    type: "button",
    onClick: previous
  }, "Back"), !isLastPage && createElement(components.NextButton, {
    type: "submit",
    disabled: formik.isSubmitting
  }, "Next"), isLastPage && createElement(components.SubmitButton, {
    type: "submit",
    disabled: formik.isSubmitting
  }, "Submit"), debug ? createElement(Fragment, null, createElement("pre", {
    style: {
      marginTop: 12,
      fontSize: 11
    }
  }, JSON.stringify(formik, null, 2)), createElement("pre", {
    style: {
      fontSize: 11
    }
  }, JSON.stringify({
    isLastPage: isLastPage
  }, null, 2))) : null)))));
}

FormikWizard.displayName = 'FormiumFormWizard';

export { FormiumForm, defaultComponents, getChoiceMap, getElementsFromForm, getInitialValues, getValidationSchema, unstable_FormiumLogic };
//# sourceMappingURL=react.esm.js.map
