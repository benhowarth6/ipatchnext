{"version":3,"file":"react.cjs.production.min.js","sources":["../src/utils/useIsomorphicLayoutEffect.tsx","../src/FormiumLogic.tsx","../src/inputs.tsx","../src/FormiumForm.tsx","../src/utils/useSessionStorage.tsx"],"sourcesContent":["/**\n * Copyright (c) Formium, Inc. and its affiliates.\n *\n * This source code is licensed under the Business Source License license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser.\nimport * as React from 'react';\nimport { canUseDOM } from '@formium/utils';\n\n// @see https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nexport const useIsomorphicLayoutEffect = canUseDOM()\n  ? React.useLayoutEffect\n  : React.useEffect;\n","/**\n * Copyright (c) Formium, Inc. and its affiliates.\n *\n * This source code is licensed under the Business Source License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as React from 'react';\nimport { useFormikContext, getIn, FormikTouched, FormikValues } from 'formik';\nimport {\n  FormElementActionAction,\n  FormElementAction,\n  FormElementActionDetailsToType,\n  Form,\n  FormSchema,\n  FormElement,\n  FormElementType,\n} from '@formium/types';\nimport { evaluateLogic, LogicCondition } from '@formium/eval';\n\nexport interface FormiumLogicProps {\n  element: FormElement;\n}\n\nconst makeResolver = (values: any) => (path: any) => {\n  return getIn(values, path);\n};\n\nconst shouldExecuteAction = (\n  valuesMap: Record<string, unknown>,\n  touched: FormikTouched<any>,\n  element: FormElement,\n  condition: FormElementAction['condition']\n) => {\n  if (\n    element.type === FormElementType.RADIO ||\n    element.type === FormElementType.CHECKBOX\n  ) {\n    return evaluateLogic(makeResolver(valuesMap), condition as LogicCondition);\n  } else if (getIn(touched, element.slug)) {\n    return evaluateLogic(makeResolver(valuesMap), condition as LogicCondition);\n  }\n  return false;\n};\n\nexport function getChoiceMap(fields: FormSchema['fields']) {\n  let items: Record<string, string> = {};\n  Object.values(fields)\n    .filter(i => i.type === FormElementType.CHOICE)\n    .reduce((prev, curr) => {\n      prev[curr.id] = curr;\n      return prev;\n    }, {} as Record<string, unknown>);\n  return items;\n}\nfunction usePrevious(value: any) {\n  // The ref object is a generic container whose current property is mutable ...\n  // ... and can hold any value, similar to an instance property on a class\n  const ref = React.useRef();\n\n  // Store current value in ref\n  React.useEffect(() => {\n    ref.current = value;\n  }, [value]); // Only re-run if value changes\n\n  // Return previous value (happens before update in useEffect above)\n  return ref.current;\n}\nexport const unstable_FormiumLogic = React.memo<{\n  form: Form;\n  element: FormElement;\n  setFieldProperty: (name: string, partial: Partial<FormElement>) => void;\n}>(({ form, element, setFieldProperty }) => {\n  const { values, touched } = useFormikContext<FormikValues>();\n  const { schema: { fields } = {} } = form;\n\n  const valuesMap = React.useMemo<Record<string, unknown>>(\n    () =>\n      Object.values(fields || {}).reduce((prev, curr) => {\n        if (curr.type === FormElementType.CHOICE) {\n          prev[curr.slug] = curr.title;\n        } else if (\n          curr.type !== FormElementType.PAGE &&\n          curr.type !== FormElementType.GROUP\n        ) {\n          prev[curr.id] = values[curr.slug];\n        }\n        return prev as Record<string, unknown>;\n      }, {} as any),\n    [values]\n  );\n\n  const previous = usePrevious(valuesMap);\n  React.useEffect(() => {\n    if (\n      element.actions &&\n      element.actions.length > 0 &&\n      element.actions.forEach\n    ) {\n      element.actions.forEach((item: FormElementAction) => {\n        // Field-level actions\n        if (item.details.to.type === FormElementActionDetailsToType.FIELD) {\n          // hide\n          if (item.action === FormElementActionAction.HIDE) {\n            setFieldProperty(item.details.to.value, {\n              hidden: shouldExecuteAction(\n                valuesMap,\n                touched,\n                element,\n                item.condition\n              )\n                ? true\n                : false,\n            });\n          }\n\n          // show\n          if (item.action === FormElementActionAction.SHOW) {\n            setFieldProperty(item.details.to.value, {\n              hidden: shouldExecuteAction(\n                valuesMap,\n                touched,\n                element,\n                item.condition\n              )\n                ? false\n                : true,\n            });\n          }\n        }\n      });\n    }\n  }, [valuesMap, setFieldProperty, previous, touched]);\n  return null;\n});\n\nunstable_FormiumLogic.displayName = 'FormiumLogic';\n","/**\n * Copyright (c) Formium, Inc. and its affiliates.\n *\n * This source code is licensed under the Business Source License license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport React from 'react';\n\n/**\n * @public\n */\nexport interface BaseInputProps {\n  /** The unique identifier of the question. */\n  id: string;\n  /** The administrative key for the field. */\n  name: string;\n  /** Whether or not the field is required. */\n  required: boolean;\n  /** Whether or not the field is disabled. */\n  disabled: boolean;\n  /** Change event handler. Use event.target.value for new value. */\n  onChange: React.FormEventHandler;\n  /** Event handler invoked when input is blurred. */\n  onBlur: React.FormEventHandler;\n  /** Event handler invoked when input is focused. */\n  onFocus: React.FormEventHandler;\n  /** Form value of the input, for controlled usage. */\n  value: string;\n  /** Input placeholder value */\n  placeholder?: string;\n}\n\n/**\n * @public\n */\nexport interface TextInputProps extends BaseInputProps {\n  /** HTML `input` type attribute. */\n  type: string;\n}\n\n/**\n * @public\n */\nexport interface TextareaProps extends BaseInputProps {\n  /** Number of `textarea` rows */\n  rows: 5;\n}\n\nexport const TextInput = React.memo<TextInputProps>(function TextInput(props) {\n  return <input {...props} type=\"text\" placeholder=\"Type your answer here\" />;\n});\n\nexport const Textarea = React.memo<TextareaProps>(function Textarea(props) {\n  return <textarea {...props} rows={5} placeholder=\"Type your answer here\" />;\n});\n\n/**\n * @public\n */\nexport interface ControlProps {\n  /** Event handler invoked when input value is changed.  */\n  onChange: React.FormEventHandler;\n  /** Event handler invoked when input is blurred.  */\n  onBlur: React.FormEventHandler;\n  /** Whether the control is checked. */\n  checked: boolean;\n  /** Whether or not the field is disabled. */\n  disabled: boolean;\n  /** Text label for the control. */\n  label: React.ReactNode;\n  /** The administrative key for the field. */\n  name: string;\n  /** Value of the control. */\n  value: string;\n  /** Unique identifier of the control. */\n  id: string;\n}\n\nexport const Checkbox = React.memo<CheckboxProps>(function Checkbox(props) {\n  return (\n    <div>\n      <input\n        id={props.id}\n        type=\"checkbox\"\n        value={props.value}\n        checked={props.checked}\n        onChange={props.onChange}\n        onBlur={props.onBlur}\n        disabled={props.disabled}\n      />\n      <label htmlFor={props.id}>{props.label}</label>\n    </div>\n  );\n});\n\nexport const Radio = React.memo<RadioProps>(function Radio(props) {\n  return (\n    <div>\n      <input\n        id={props.id}\n        type=\"radio\"\n        value={props.value}\n        checked={props.checked}\n        onChange={props.onChange}\n        onBlur={props.onBlur}\n        disabled={props.disabled}\n      />\n      <label htmlFor={props.id}>{props.label}</label>\n    </div>\n  );\n});\n\n/**\n * An interface for an option in a list, such as in a `<select>` or `RadioGroup`.\n * The idea is that these props can be spread directly to an `<option>` or `<Radio>` element.\n *\n * @public\n */\nexport interface OptionProps {\n  /** Unique identifier of the option */\n  id: string;\n  /** Whether this option is non-interactive. */\n  disabled?: boolean;\n\n  /** Label text for this option. If omitted, `value` is used as the label. */\n  label: string;\n\n  /** Value of this option. */\n  value: string | number;\n}\n\n/** @public */\nexport type RadioProps = ControlProps;\n\n/** @public */\nexport type CheckboxProps = ControlProps;\n\n/**\n * @public\n */\nexport interface RadioGroupProps {\n  /** Unique identifier field. */\n  id: string;\n  /**\n   * Whether the group and _all_ its radios are disabled.\n   */\n  disabled: boolean;\n\n  /**\n   * Whether the group is required.\n   */\n  required: boolean;\n\n  /** Optional label text to display above the radio buttons. */\n  // label?: React.ReactNode;\n\n  /**\n   * Name of the group (i.e. the administrative key), used to link radio buttons together in HTML.\n   */\n  name: string;\n\n  /**\n   * Callback invoked when the currently selected radio changes.\n   * Use `event.target.value` to read the currently selected value.\n   */\n  onChange: (event: React.SyntheticEvent) => void;\n\n  /**\n   * Event handler invoked when input is blurred.\n   */\n  onBlur: (event: React.SyntheticEvent) => void;\n  /**\n   * Array of options to render in the group.\n   */\n  options: OptionProps[];\n\n  /** Value of the selected radio. The child with this value will be `:checked`. */\n  value: string;\n}\n","/**\n * Copyright (c) Formium, Inc. and its affiliates.\n *\n * This source code is licensed under the Business Source License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Form, FormElement, FormElementType } from '@formium/types';\nimport { canUseDOM } from '@formium/utils';\nimport {\n  Field,\n  Form as FormikForm,\n  FormikConfig,\n  FormikContext,\n  FormikValues,\n  useFormik,\n  useFormikContext,\n} from 'formik';\nimport * as React from 'react';\nimport * as Yup from 'yup';\nimport { useIsomorphicLayoutEffect } from './utils/useIsomorphicLayoutEffect';\nimport { unstable_FormiumLogic as FormiumLogic } from './FormiumLogic';\nimport {\n  Checkbox,\n  ControlProps,\n  Radio,\n  RadioGroupProps,\n  Textarea,\n  TextareaProps,\n  TextInput,\n  TextInputProps,\n} from './inputs';\nimport { useStorage } from './utils/useSessionStorage';\n\nconst SubmitButton: React.FC<JSX.IntrinsicElements['button']> = props => {\n  return <button type=\"submit\" {...props} />;\n};\n\nconst NextButton: React.FC<JSX.IntrinsicElements['button']> = props => {\n  return <button type=\"button\" {...props} />;\n};\n\nfunction Header({ page, pageIndex }: { page: FormElement; pageIndex: number }) {\n  return (\n    <>\n      {page.title ? (\n        pageIndex === 0 ? (\n          <h1>{page.title}</h1>\n        ) : (\n          <h2>{page.title}</h2>\n        )\n      ) : null}\n      {page.description ? <p>{page.description}</p> : null}\n    </>\n  );\n}\n\n/**\n * Formium Form options\n * @public\n */\nexport interface FormiumFormProps<V> {\n  /**\n   * A Formium Form (returned from an API Client)\n   */\n  data: Form;\n  /**\n   * Submission callback handler. This function is called when the\n   * form is valid and a submission is attempted by pressing\n   * the submit button on the last page of the form.\n   */\n  onSubmit: (values: V) => Promise<void>;\n  /**\n   * Custom component overrides. When specified, these will be used\n   * instead of the default components for rendering respective inputs.\n   *\n   * @default defaultComponents\n   */\n  components?: FormiumComponents;\n}\n\nexport interface FormiumComponents {\n  SubmitButton: React.ComponentType<JSX.IntrinsicElements['button']>;\n  PreviousButton: React.ComponentType<JSX.IntrinsicElements['button']>;\n  NextButton: React.ComponentType<JSX.IntrinsicElements['button']>;\n  Header: any;\n  PageWrapper: any;\n  ElementsWrapper: any;\n  FooterWrapper: any;\n  FieldWrapper: any;\n  FormControl: React.ComponentType<FormControlProps>;\n  TextInput: React.ComponentType<TextInputProps>;\n  Textarea: React.ComponentType<TextareaProps>;\n  Checkbox: React.ComponentType<ControlProps>;\n  Radio: React.ComponentType<ControlProps>;\n  RadioGroup?: React.ComponentType<RadioGroupProps>;\n}\n\nexport interface FormControlProps {\n  /**\n   * Whether field should appear as non-interactive.\n   * Remember that `input` elements must be disabled separately.\n   */\n  disabled: boolean;\n\n  /**\n   * Whether field is required\n   */\n  required: boolean;\n\n  /**\n   * Label of this field.\n   */\n  label?: React.ReactNode;\n\n  /**\n   * `id` attribute of the field that this `FormControl` controls,\n   * used as `<label htmlFor>` attribute.\n   */\n  labelFor?: string;\n\n  /**\n   * Optional helper text.\n   */\n  description?: React.ReactNode;\n\n  /**\n   * Error message (if present) and the current field has been visited, otherwise this will be undefined.\n   */\n  error?: React.ReactNode;\n\n  /**\n   * React children. This is where actual field implementation will be rendered.\n   */\n  children?: React.ReactNode;\n}\n\nconst FormControl = React.memo<FormControlProps>(function FormControl({\n  children,\n  description,\n  error,\n  label,\n  labelFor,\n}) {\n  return (\n    <div>\n      {label && <label htmlFor={labelFor}>{label}</label>}\n      {description && <div>{description}</div>}\n      {children}\n      {error && <div>{error}</div>}\n    </div>\n  );\n});\n\nexport const defaultComponents: FormiumComponents = {\n  SubmitButton,\n  NextButton,\n  PreviousButton: NextButton,\n  Header,\n  ElementsWrapper: ({ children }: any) => children,\n  PageWrapper: ({ children }: any) => children,\n  FooterWrapper: ({ children }: any) => children,\n  FieldWrapper: (props: any) => <div {...props} />,\n  FormControl,\n  TextInput,\n  Textarea,\n  Radio,\n  Checkbox,\n};\n\nconst Page: React.FC<any> = ({ children }) => children;\n\nPage.displayName = 'FormiumPage';\n\n/**\n * Return the list of \"input\" elements from a form. This is every element\n * except for Groups, Pages, and Choices.\n *\n * @param form A formium form\n * @public\n * @alpha\n */\nexport const getElementsFromForm = (form?: Form) => {\n  if (!form) {\n    return [];\n  }\n  if (!form.schema?.fields) {\n    return [];\n  }\n\n  return Object.values(form.schema.fields).filter(\n    i =>\n      i.type !== FormElementType.GROUP &&\n      i.type !== FormElementType.PAGE &&\n      i.type !== FormElementType.CHOICE\n  );\n};\n\n/**\n * Return a Yup object schema based on a list of form elements.\n *\n * @param inputElements - An array of expanded FormElements\n * @returns A Yup schema\n * @public\n * @alpha\n */\nexport function getValidationSchema(inputElements?: FormElement[]) {\n  return Yup.object(\n    inputElements &&\n      inputElements.reduce((prev: any, curr: any) => {\n        let validation;\n        if (curr.hidden) {\n          return prev;\n        }\n        // @todo make this a switch\n        if (curr.type === FormElementType.CHECKBOX) {\n          validation = Yup.array().of(Yup.string());\n        } else if (\n          curr.type === FormElementType.RADIO &&\n          curr.children &&\n          curr.children.length > 0\n        ) {\n          validation = Yup.string();\n          if (!curr.allowOther) {\n            validation = validation.oneOf(\n              curr.children.map((c: any) => c.title)\n            );\n          }\n        } else if (\n          curr.type === FormElementType.SHORT_TEXT ||\n          curr.type === FormElementType.LONG_TEXT\n        ) {\n          validation = Yup.string();\n          if (curr.maxLength) {\n            validation = validation.max(\n              curr.maxLength,\n              `Must be less than ${curr.maxLength}`\n            );\n          }\n        } else if (curr.type === FormElementType.EMAIL) {\n          validation = Yup.string().email('Invalid email');\n          if (curr.maxLength) {\n            validation = validation.max(\n              curr.maxLength,\n              `Must be less than ${curr.maxLength} characters`\n            );\n          }\n        } else if (curr.type === FormElementType.PHONE_NUMBER) {\n          validation = Yup.string();\n          if (curr.maxLength) {\n            validation = validation.max(\n              curr.maxLength,\n              `Must be less than ${curr.maxLength} characters`\n            );\n          }\n        } else if (curr.type === FormElementType.DATE) {\n          validation = Yup.date();\n        } else if (curr.type === FormElementType.TIME) {\n          validation = Yup.string();\n        } else if (curr.type === FormElementType.URL) {\n          validation = Yup.string().url('Invalid URL');\n          if (curr.maxLength) {\n            validation = validation.max(\n              curr.maxLength,\n              `Must be less than ${curr.maxLength} characters`\n            );\n          }\n        } else if (curr.type === FormElementType.BOOLEAN) {\n          validation = Yup.boolean();\n        } else if (curr.type === FormElementType.NUMBER) {\n          validation = Yup.number();\n          if (curr.minValue) {\n            validation = validation.min(\n              curr.minValue,\n              `Must be greater than ${curr.minValue}`\n            );\n          }\n          if (curr.maxValue) {\n            validation = validation.max(\n              curr.maxValue,\n              `Must be less than ${curr.maxValue}`\n            );\n          }\n        }\n\n        if (curr.required) {\n          // @todo fix type\n          validation = (validation as any).required(\n            curr.requiredText ?? 'This question requires an answer.'\n          );\n        }\n\n        // @todo fix type\n        (prev as any)[curr.slug] = validation;\n        return prev;\n      }, {})\n  );\n}\n\ntype NestedField = FormElement & { children?: FormElement[] };\n\n/**\n * Return initial values given an array of form elements (i.e. like on a page)\n *\n * @param inputElements - An array of expanded FormElements\n * @typeParam Values - The shape of the values of your form (an object with keys matching those specified in the dashboard)\n * @returns Initial values for the array of elements / page. This does not include values set by dynamic population.\n * @public\n */\nexport function getInitialValues<Values>(inputElements: FormElement[]): Values {\n  return inputElements.reduce((prev: any, curr: FormElement) => {\n    if (curr.type === FormElementType.CHECKBOX) {\n      (prev as any)[curr.slug] = [];\n    } else {\n      (prev as any)[curr.slug] = curr.defaultValue ?? '';\n    }\n    return prev;\n  }, {} as Values);\n}\n\nfunction denormalize(arr: string[], get: (id: string) => any): NestedField[] {\n  return (\n    arr &&\n    arr.map(id => {\n      const el = get(id);\n      return {\n        ...el,\n        ...(el.items && el.items.length > 0\n          ? { children: denormalize(el.items, get) }\n          : {}),\n      };\n    })\n  );\n}\n\nconst FormControlWrapper = React.memo<\n  {\n    component: FormiumComponents['FormControl'];\n    name: string;\n  } & FormControlProps\n>(({ component: Comp, name, ...props }) => {\n  const formik = useFormikContext();\n  const { error, touched } = formik.getFieldMeta(name);\n  return <Comp {...props} error={!!touched && !!error && error} />;\n});\n\n/**\n * @public\n */\nexport function FormiumForm<Values extends FormikValues = FormikValues>({\n  data: _data,\n  components = defaultComponents,\n  ...props\n}: FormiumFormProps<Values>) {\n  const [form, setForm] = React.useState<Form>(_data);\n  const children = denormalize(\n    form?.schema?.pageIds ?? [],\n    (id: string) => form?.schema?.fields[id]\n  );\n  const initialValues: Values = getInitialValues(getElementsFromForm(form));\n  const setFieldProperty = React.useCallback(\n    (id: string, partial: Partial<FormElement>) => {\n      setForm((f: Form) => ({\n        ...f,\n        schema: {\n          ...(f.schema ?? {}),\n          fields: {\n            ...(f.schema?.fields ?? {}),\n            [id]: {\n              ...(f.schema?.fields[id] ?? {}),\n              ...partial,\n            } as FormElement,\n          },\n        },\n      }));\n    },\n    [setForm]\n  );\n\n  return (\n    <FormikWizard\n      components={components}\n      initialValues={initialValues}\n      data={_data}\n      {...props}\n    >\n      {children &&\n        children.map((page: NestedField, pageIndex: number) => (\n          <Page\n            key={page.id}\n            validationSchema={getValidationSchema(\n              children![pageIndex].children!\n            )}\n          >\n            <components.PageWrapper>\n              <components.Header\n                form={form}\n                page={page}\n                pageIndex={pageIndex}\n              />\n              <components.ElementsWrapper>\n                {page.children &&\n                  page.children.map((element: NestedField, index: number) => {\n                    const {\n                      id,\n                      children,\n                      actions,\n                      items,\n                      hidden,\n                      required,\n                      requiredText,\n                      defaultValue,\n                      placeholder,\n                      ...item\n                    } = element;\n                    if (hidden) {\n                      return null;\n                    }\n                    return (\n                      <components.FieldWrapper key={id}>\n                        <FormiumLogic\n                          form={form}\n                          element={element}\n                          setFieldProperty={setFieldProperty}\n                        />\n\n                        {item.type === FormElementType.SHORT_TEXT ? (\n                          <FormControlWrapper\n                            required={!!required}\n                            label={item.title!}\n                            labelFor={id}\n                            name={item.slug}\n                            description={item.description}\n                            component={components.FormControl}\n                            disabled={false}\n                          >\n                            <Field\n                              as={components.TextInput}\n                              name={item.slug}\n                              placeholder={placeholder}\n                              required={required}\n                              disabled={false}\n                              id={id}\n                              type=\"text\"\n                            />\n                          </FormControlWrapper>\n                        ) : item.type === FormElementType.EMAIL ? (\n                          <FormControlWrapper\n                            required={!!required}\n                            label={item.title!}\n                            labelFor={id}\n                            name={item.slug}\n                            description={item.description}\n                            component={components.FormControl}\n                            disabled={false}\n                          >\n                            <Field\n                              as={components.TextInput}\n                              name={item.slug}\n                              placeholder={placeholder}\n                              required={required}\n                              id={id}\n                              type=\"email\"\n                            />\n                          </FormControlWrapper>\n                        ) : item.type === FormElementType.URL ? (\n                          <FormControlWrapper\n                            required={!!required}\n                            label={item.title!}\n                            labelFor={id}\n                            name={item.slug}\n                            description={item.description}\n                            component={components.FormControl}\n                            disabled={false}\n                          >\n                            <Field\n                              as={components.TextInput}\n                              name={item.slug}\n                              placeholder={placeholder}\n                              required={required}\n                              id={id}\n                              type=\"url\"\n                            />\n                          </FormControlWrapper>\n                        ) : item.type === FormElementType.RADIO ? (\n                          <FormControlWrapper\n                            required={!!required}\n                            label={item.title!}\n                            labelFor={id}\n                            name={item.slug}\n                            description={item.description}\n                            component={components.FormControl}\n                            disabled={false}\n                          >\n                            {components.RadioGroup ? (\n                              <Field\n                                as={components.RadioGroup}\n                                id={id}\n                                name={item.slug}\n                                required={!!required}\n                                disabled={false}\n                                options={\n                                  children &&\n                                  children.length > 0 &&\n                                  children.map((c: any) => ({\n                                    id: c.id,\n                                    disabled: false,\n                                    label: c.title,\n                                    value: c.title,\n                                  }))\n                                }\n                              />\n                            ) : (\n                              <>\n                                {children &&\n                                  children.length > 0 &&\n                                  children.map((c: any) => (\n                                    <div key={c.id}>\n                                      <Field\n                                        as={components.Radio}\n                                        value={c.title}\n                                        label={c.title}\n                                        type=\"radio\"\n                                        name={item.slug}\n                                        id={c.id}\n                                      />\n                                    </div>\n                                  ))}\n                              </>\n                            )}\n                          </FormControlWrapper>\n                        ) : item.type === FormElementType.CHECKBOX ? (\n                          <>\n                            <FormControlWrapper\n                              required={!!required}\n                              label={item.title!}\n                              labelFor={id}\n                              name={item.slug}\n                              description={item.description}\n                              component={components.FormControl}\n                              disabled={false}\n                            >\n                              {children &&\n                                children.length > 0 &&\n                                children.map((c: any) => (\n                                  <div key={c.id}>\n                                    <Field\n                                      as={components.Checkbox}\n                                      role=\"checkbox\"\n                                      value={c.title}\n                                      label={c.title}\n                                      type=\"checkbox\"\n                                      name={item.slug}\n                                      id={c.id}\n                                    />\n                                  </div>\n                                ))}\n                            </FormControlWrapper>\n                          </>\n                        ) : item.type === FormElementType.LONG_TEXT ? (\n                          <FormControlWrapper\n                            required={!!required}\n                            label={item.title!}\n                            labelFor={id}\n                            name={item.slug}\n                            description={item.description}\n                            component={components.FormControl}\n                            disabled={false}\n                          >\n                            <Field\n                              as={components.Textarea}\n                              name={item.slug}\n                              placeholder={placeholder}\n                              required={required}\n                              id={id}\n                            />\n                          </FormControlWrapper>\n                        ) : null}\n                      </components.FieldWrapper>\n                    );\n                  })}\n              </components.ElementsWrapper>\n            </components.PageWrapper>\n          </Page>\n        ))}\n    </FormikWizard>\n  );\n}\nconst getFormPageStorageKey = (id: string) => `formium-${id}-form-page`;\nconst getFormStateStorageKey = (id: string) => `formium-${id}-form-state`;\n\nfunction FormikWizard<Values extends FormikValues = FormikValues>({\n  initialValues,\n  children,\n  onSubmit,\n  components = defaultComponents,\n  debug,\n  ...props\n}: FormikConfig<Values> &\n  FormiumFormProps<Values> & {\n    debug?: boolean;\n  }) {\n  const { id } = props.data;\n  const pageStorageKey = React.useMemo(() => getFormPageStorageKey(id), [id]);\n  const stateStorageKey = React.useMemo(() => getFormStateStorageKey(id), [id]);\n  const [page, setPage] = useStorage(pageStorageKey, 0);\n  const [values, setValues] = React.useState(initialValues || {});\n  const next = React.useCallback(\n    newValues => {\n      if (children) {\n        setPage(p =>\n          Math.min(p + 1, React.Children.toArray(children).length - 1)\n        );\n        setValues(newValues);\n      }\n    },\n    [setPage, setValues, children]\n  );\n  const previous = React.useCallback(() => {\n    setPage(p => Math.max(p - 1, 0));\n  }, [setPage]);\n\n  const validationSchema = React.useCallback(\n    v => {\n      const activePage: any = React.Children.toArray(children)[page];\n      return activePage.props.validationSchema\n        ? activePage.props.validationSchema\n        : {};\n    },\n    [children, page]\n  );\n\n  const handleSubmit = React.useCallback(\n    async (currentValues, formikActions) => {\n      const isLastPage = page === React.Children.count(children) - 1;\n\n      if (isLastPage) {\n        return onSubmit(currentValues).then(() => {\n          sessionStorage.removeItem(pageStorageKey);\n          sessionStorage.removeItem(stateStorageKey);\n        });\n      } else {\n        formikActions.setTouched({});\n        next(currentValues);\n        return;\n      }\n    },\n    [page, children, onSubmit, pageStorageKey, stateStorageKey, next]\n  );\n  const activePage = React.Children.toArray(children)[page];\n  const isLastPage = page === React.Children.count(children) - 1;\n  const formik = useFormik({\n    initialValues: values as any,\n    onSubmit: handleSubmit,\n    // enableReinitialize: true,\n    validationSchema,\n    ...props,\n  });\n\n  const {\n    setFormikState,\n    values: formikValues,\n    touched,\n    errors,\n    initialValues: formikInitialValues,\n  } = formik;\n\n  React.useEffect(() => {\n    if (canUseDOM()) {\n      sessionStorage.setItem(\n        stateStorageKey,\n        JSON.stringify({\n          values: formikValues,\n          touched,\n          initialValues: formikInitialValues,\n        })\n      );\n    }\n  }, [formikValues, touched, errors, formikInitialValues, stateStorageKey]);\n\n  useIsomorphicLayoutEffect(() => {\n    try {\n      const maybeF = sessionStorage.getItem(stateStorageKey);\n      if (maybeF) {\n        const newState = JSON.parse(maybeF);\n        setFormikState(newState);\n      }\n    } catch (_error) {}\n  }, [setFormikState, stateStorageKey]);\n\n  return (\n    <FormikContext.Provider value={formik}>\n      <FormikForm>\n        <>\n          <components.PageWrapper>\n            {activePage}\n            <components.FooterWrapper>\n              {page > 0 && (\n                <components.PreviousButton type=\"button\" onClick={previous}>\n                  Back\n                </components.PreviousButton>\n              )}\n              {!isLastPage && (\n                <components.NextButton\n                  type=\"submit\"\n                  disabled={formik.isSubmitting}\n                >\n                  Next\n                </components.NextButton>\n              )}\n              {isLastPage && (\n                <components.SubmitButton\n                  type=\"submit\"\n                  disabled={formik.isSubmitting}\n                >\n                  Submit\n                </components.SubmitButton>\n              )}\n              {debug ? (\n                <>\n                  <pre style={{ marginTop: 12, fontSize: 11 }}>\n                    {JSON.stringify(formik, null, 2)}\n                  </pre>\n                  <pre style={{ fontSize: 11 }}>\n                    {JSON.stringify({ isLastPage }, null, 2)}\n                  </pre>\n                </>\n              ) : null}\n            </components.FooterWrapper>\n          </components.PageWrapper>\n        </>\n      </FormikForm>\n    </FormikContext.Provider>\n  );\n}\n\nFormikWizard.displayName = 'FormiumFormWizard';\n","/**\n * Copyright (c) Formium, Inc. and its affiliates.\n *\n * This source code is licensed under the Business Source License found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable */\nimport { useEffect, useState } from 'react';\nimport { canUseDOM } from '@formium/utils';\n\ntype parserOptions<T> =\n  | {\n      raw: true;\n    }\n  | {\n      raw: false;\n      serializer: (value: T) => string;\n      deserializer: (value: string) => T;\n    };\n\nexport const useStorage = <T,>(\n  key: string,\n  initialValue?: T,\n  options?: parserOptions<T>\n): [T, React.Dispatch<React.SetStateAction<T>>] => {\n  if (!canUseDOM) {\n    return [initialValue as T, () => {}];\n  }\n\n  // Use provided serializer/deserializer or the default ones\n  const serializer = options\n    ? options.raw\n      ? String\n      : options.serializer\n    : JSON.stringify;\n  const deserializer = options\n    ? options.raw\n      ? String\n      : options.deserializer\n    : JSON.parse;\n\n  const [state, setState] = useState<T>(() => {\n    try {\n      const sessionStorageValue = sessionStorage.getItem(key);\n      if (sessionStorageValue !== null) {\n        return deserializer(sessionStorageValue);\n      } else {\n        initialValue && sessionStorage.setItem(key, serializer(initialValue));\n        return initialValue;\n      }\n    } catch {\n      // If user is in private mode or has storage restriction\n      // sessionStorage can throw. JSON.parse and JSON.stringify\n      // can throw, too.\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    try {\n      sessionStorage.setItem(key, serializer(state));\n    } catch {\n      // If user is in private mode or has storage restriction\n      // sessionStorage can throw. Also JSON.stringify can throw.\n    }\n  }, [state]);\n\n  return [state, setState];\n};\n"],"names":["useIsomorphicLayoutEffect","canUseDOM","React","shouldExecuteAction","valuesMap","touched","element","condition","type","FormElementType","RADIO","CHECKBOX","getIn","slug","evaluateLogic","values","path","unstable_FormiumLogic","value","ref","form","setFieldProperty","useFormikContext","schema","fields","Object","reduce","prev","curr","CHOICE","title","PAGE","GROUP","id","previous","current","actions","length","forEach","item","details","to","FormElementActionDetailsToType","FIELD","action","FormElementActionAction","HIDE","hidden","SHOW","displayName","TextInput","memo","props","placeholder","Textarea","rows","Checkbox","checked","onChange","onBlur","disabled","htmlFor","label","Radio","NextButton","defaultComponents","SubmitButton","PreviousButton","Header","page","pageIndex","description","ElementsWrapper","children","PageWrapper","FooterWrapper","FieldWrapper","FormControl","error","labelFor","Page","getElementsFromForm","_form$schema","filter","i","getValidationSchema","inputElements","Yup","validation","of","allowOther","oneOf","map","c","SHORT_TEXT","LONG_TEXT","maxLength","max","EMAIL","email","PHONE_NUMBER","DATE","TIME","URL","url","BOOLEAN","NUMBER","minValue","min","maxValue","required","requiredText","getInitialValues","defaultValue","FormControlWrapper","Comp","component","name","getFieldMeta","FormikWizard","initialValues","onSubmit","components","debug","data","pageStorageKey","getFormPageStorageKey","stateStorageKey","getFormStateStorageKey","key","initialValue","options","serializer","JSON","stringify","deserializer","parse","useState","sessionStorageValue","sessionStorage","getItem","state","setState","useEffect","setItem","useStorage","setPage","setValues","next","newValues","p","Math","toArray","validationSchema","v","activePage","handleSubmit","currentValues","formikActions","count","then","removeItem","setTouched","isLastPage","formik","useFormik","setFormikState","formikValues","formikInitialValues","errors","maybeF","newState","_error","FormikContext","Provider","FormikForm","onClick","isSubmitting","style","marginTop","fontSize","_data","setForm","denormalize","arr","get","el","items","_form$schema2","pageIds","_form$schema3","partial","f","_f$schema2","_f$schema3","index","FormiumLogic","Field","as","RadioGroup","role"],"mappings":"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"}