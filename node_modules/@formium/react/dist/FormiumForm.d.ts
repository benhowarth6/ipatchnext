/**
 * Copyright (c) Formium, Inc. and its affiliates.
 *
 * This source code is licensed under the Business Source License found in the
 * LICENSE file in the root directory of this source tree.
 */
import { Form, FormElement } from '@formium/types';
import { FormikValues } from 'formik';
import * as React from 'react';
import * as Yup from 'yup';
import { ControlProps, RadioGroupProps, TextareaProps, TextInputProps } from './inputs';
/**
 * Formium Form options
 * @public
 */
export interface FormiumFormProps<V> {
    /**
     * A Formium Form (returned from an API Client)
     */
    data: Form;
    /**
     * Submission callback handler. This function is called when the
     * form is valid and a submission is attempted by pressing
     * the submit button on the last page of the form.
     */
    onSubmit: (values: V) => Promise<void>;
    /**
     * Custom component overrides. When specified, these will be used
     * instead of the default components for rendering respective inputs.
     *
     * @default defaultComponents
     */
    components?: FormiumComponents;
}
export interface FormiumComponents {
    SubmitButton: React.ComponentType<JSX.IntrinsicElements['button']>;
    PreviousButton: React.ComponentType<JSX.IntrinsicElements['button']>;
    NextButton: React.ComponentType<JSX.IntrinsicElements['button']>;
    Header: any;
    PageWrapper: any;
    ElementsWrapper: any;
    FooterWrapper: any;
    FieldWrapper: any;
    FormControl: React.ComponentType<FormControlProps>;
    TextInput: React.ComponentType<TextInputProps>;
    Textarea: React.ComponentType<TextareaProps>;
    Checkbox: React.ComponentType<ControlProps>;
    Radio: React.ComponentType<ControlProps>;
    RadioGroup?: React.ComponentType<RadioGroupProps>;
}
export interface FormControlProps {
    /**
     * Whether field should appear as non-interactive.
     * Remember that `input` elements must be disabled separately.
     */
    disabled: boolean;
    /**
     * Whether field is required
     */
    required: boolean;
    /**
     * Label of this field.
     */
    label?: React.ReactNode;
    /**
     * `id` attribute of the field that this `FormControl` controls,
     * used as `<label htmlFor>` attribute.
     */
    labelFor?: string;
    /**
     * Optional helper text.
     */
    description?: React.ReactNode;
    /**
     * Error message (if present) and the current field has been visited, otherwise this will be undefined.
     */
    error?: React.ReactNode;
    /**
     * React children. This is where actual field implementation will be rendered.
     */
    children?: React.ReactNode;
}
export declare const defaultComponents: FormiumComponents;
/**
 * Return the list of "input" elements from a form. This is every element
 * except for Groups, Pages, and Choices.
 *
 * @param form A formium form
 * @public
 * @alpha
 */
export declare const getElementsFromForm: (form?: Form | undefined) => FormElement[];
/**
 * Return a Yup object schema based on a list of form elements.
 *
 * @param inputElements - An array of expanded FormElements
 * @returns A Yup schema
 * @public
 * @alpha
 */
export declare function getValidationSchema(inputElements?: FormElement[]): Yup.ObjectSchema<object>;
/**
 * Return initial values given an array of form elements (i.e. like on a page)
 *
 * @param inputElements - An array of expanded FormElements
 * @typeParam Values - The shape of the values of your form (an object with keys matching those specified in the dashboard)
 * @returns Initial values for the array of elements / page. This does not include values set by dynamic population.
 * @public
 */
export declare function getInitialValues<Values>(inputElements: FormElement[]): Values;
/**
 * @public
 */
export declare function FormiumForm<Values extends FormikValues = FormikValues>({ data: _data, components, ...props }: FormiumFormProps<Values>): JSX.Element;
